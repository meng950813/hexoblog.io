<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[禁止apache显示目录索引]]></title>
      <url>http://www.cmeng.cc/2017/04/01/appache-forbide-file-dir/</url>
      <content type="html"><![CDATA[<h2 id="禁止apache显示目录索引"><a href="#禁止apache显示目录索引" class="headerlink" title="禁止apache显示目录索引"></a>禁止apache显示目录索引</h2><p>服务器上部署项目之后会显示文件索引，这很烦，也让网站很不安全，所以找办法禁止显示。下面是找到的禁止Apache显示目录索引的常见的2种方法。<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fdy9npr95ig300o00o741.gif" alt="斜眼笑"><br><a id="more"></a></p>
<h4 id="方法一：修改目录配置"><a href="#方法一：修改目录配置" class="headerlink" title="方法一：修改目录配置"></a>方法一：修改目录配置</h4><p><strong> 注：Apache修改httpd.conf，Apache2修改apache2.conf </strong></p>
<ol>
<li>初始配置文件如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Directory /var/www&gt;</div><div class="line">    Options Indexes FollowSymLinks </div><div class="line">    <span class="comment"># 修改为： Options FollowSymLinks</span></div><div class="line">    AllowOverride None</div><div class="line">    Order allow,deny</div><div class="line">    Allow from all</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>注：Indexes 的作用就是当该目录下没有 index.html 文件时，就显示目录结构,去掉 Indexes, Apache 就不会显示该目录的列表了。</p>
<h4 id="方法二：-通过-htaccess文件"><a href="#方法二：-通过-htaccess文件" class="headerlink" title="方法二： 通过.htaccess文件"></a>方法二： 通过.htaccess文件</h4><p>可以在根目录新建或修改 .htaccess 文件中添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Files *&gt;</div><div class="line"> Options -Indexes</div><div class="line">&lt;/Files&gt;</div></pre></td></tr></table></figure></p>
<p>就可以禁止Apache显示目录索引。</p>
<p><strong> 保存修改文件，重启服务器 </strong><br>不会重启apache？狠狠点这里 <a href="https://meng950813.github.io/2017/04/01/linux-apache/#more" target="_blank" rel="external">linux配置apache</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux 下的 mysql 命令行操作]]></title>
      <url>http://www.cmeng.cc/2017/04/01/Linux-MySql/</url>
      <content type="html"><![CDATA[<h2 id="linux-下的-mysql-命令行操作"><a href="#linux-下的-mysql-命令行操作" class="headerlink" title="linux 下的 mysql 命令行操作"></a>linux 下的 mysql 命令行操作</h2><p>突然发现又忘了服务器上的数据库怎么用的了。。。<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fe762j63jij300s00smx0.jpg" alt="苦笑"><br>所以决定写这篇博客记录一下linux下的常用的mysql数据库命令。防忘标签<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fe76435sfrj300s00sjr5.jpg" alt="滑稽"><br>注：所有命令基于ubuntu系统<br><a id="more"></a></p>
<h2 id="linux下安装mysql"><a href="#linux下安装mysql" class="headerlink" title="linux下安装mysql"></a>linux下安装mysql</h2><p><strong> 更新本地软件库的索引 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure></p>
<p><strong> 安装数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-server</div></pre></td></tr></table></figure></p>
<p><strong> 安装客户端 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-client</div><div class="line">sudo apt-get install libmysqlclient-dev</div></pre></td></tr></table></figure></p>
<p><strong> 判断是否安装成功 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(sudo) netstat -tap|grep mysql</div></pre></td></tr></table></figure></p>
<p>出现这个就是成功：<br><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fe76ry44inj30jx01wa9y.jpg" alt="检查mysql是否安装成功"></p>
<h2 id="简单配置mysql"><a href="#简单配置mysql" class="headerlink" title="简单配置mysql"></a>简单配置mysql</h2><p><strong> 设置数据库编码 </strong><br>打开配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/mysql/my.cof</div></pre></td></tr></table></figure></p>
<p>修改如下位置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[client]</div><div class="line">port            = 3306</div><div class="line">socket          = /var/run/mysqld/mysqld.sock</div><div class="line"><span class="comment">#增加客户端的字符编码</span></div><div class="line">default-character-set=utf8</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"><span class="comment">#增加服务器端的字符编码</span></div><div class="line">character-set-server=utf8</div><div class="line">collation-server=utf8_general_ci</div></pre></td></tr></table></figure>
<p>让服务器可以远程访问，还是配置文件my.cnf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#注释bind-address</span></div><div class="line"><span class="comment">#bind-address        = 127.0.0.1</span></div></pre></td></tr></table></figure></p>
<h2 id="mysql-常用命令"><a href="#mysql-常用命令" class="headerlink" title="mysql 常用命令"></a>mysql 常用命令</h2><p><strong> 启动mysql </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysql start</div></pre></td></tr></table></figure></p>
<p><strong> 停止mysql </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysql stop</div></pre></td></tr></table></figure></p>
<p><strong> 登录 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//-u后面跟用户名，回车之后输入密码即可</div><div class="line">mysql -u root -p</div></pre></td></tr></table></figure></p>
<p><strong> 查看数据库字符集 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show variables like <span class="string">'character%'</span>;</div></pre></td></tr></table></figure></p>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p><strong> 创建数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database &lt;数据库名&gt;;</div></pre></td></tr></table></figure></p>
<p><strong> 显示所有数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show databases;</div></pre></td></tr></table></figure></p>
<p><strong> 进入/切换数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use &lt;数据库名&gt;;</div></pre></td></tr></table></figure></p>
<p><strong> 删除数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop database &lt;数据库名&gt;;</div></pre></td></tr></table></figure></p>
<p><strong> 查看当前使用数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select database();</div></pre></td></tr></table></figure></p>
<h2 id="数据库导入与导出-备份与恢复"><a href="#数据库导入与导出-备份与恢复" class="headerlink" title="数据库导入与导出(备份与恢复)"></a>数据库导入与导出(备份与恢复)</h2><p><strong> 导入数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p 数据库名&lt;数据库文件; //导入时数据库必须存在，可以为空数据库</div></pre></td></tr></table></figure></p>
<p><strong> 导出数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump -u root -p --opt 数据库名&gt;备份名; //进入到库目录</div></pre></td></tr></table></figure></p>
<p><strong> 数据库授权 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grant select,... on 数据库.*  to  用户名@登录主机 identified by <span class="string">"密码"</span>;</div></pre></td></tr></table></figure></p>
<p>例-1：增加一个用户user001密码为123456，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grant select,insert,update,delete on *.* to user001@<span class="string">"%"</span> Identified by <span class="string">"123456"</span>;</div></pre></td></tr></table></figure></p>
<p>例-2:增加一个用户user002密码为123456,让此用户只可以在localhost上登录,也可以设置指定IP，并可以对数据库test进行查询、插入、修改、删除的操作 (localhost 指本地主机,即MySQL数据库所在的那台主机)<br>//这样用户即使用知道user_2的密码，他也无法从网上直接访问数据库，只能通过MYSQL主机来操作test库。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grant select,insert,update,delete on test.* to user002@localhost identified by <span class="string">"123456"</span>;</div></pre></td></tr></table></figure></p>
<h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><p><strong> 显示所有表 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show tables;</div></pre></td></tr></table></figure></p>
<p><strong> 显示表结构 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">describe &lt;表名&gt;;</div></pre></td></tr></table></figure></p>
<p><strong> 建表 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">create table &lt;表名&gt;(字段属性);</div><div class="line">例：</div><div class="line">create table name(</div><div class="line">        id int auto_increment not null primary key ,</div><div class="line">        uname char(8)</div><div class="line">    );</div><div class="line">注： auto_increment 自增</div><div class="line">     primary key    主键</div><div class="line">     foreign key(字段名) references(表名.字段名) 外键</div></pre></td></tr></table></figure></p>
<p><strong> 删表 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop table &lt;表名&gt;;</div></pre></td></tr></table></figure></p>
<h2 id="记录操作（增删改查）"><a href="#记录操作（增删改查）" class="headerlink" title="记录操作（增删改查）"></a>记录操作（增删改查）</h2><p><strong> 增加记录 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insert into &lt;表名&gt;(字段名,...) values(字段值,...);</div></pre></td></tr></table></figure></p>
<p><strong> 删除记录 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete from &lt;表名&gt; <span class="built_in">where</span> xxxx;</div></pre></td></tr></table></figure></p>
<p><strong> 修改记录 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update &lt;表名&gt; <span class="built_in">set</span> 字段名=<span class="string">"新值"</span> <span class="built_in">where</span> xxxx;</div></pre></td></tr></table></figure></p>
<p><strong> 查询记录 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select xxx from &lt;表名，...&gt;  <span class="built_in">where</span> xxxx;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux 下安装配置 apache]]></title>
      <url>http://www.cmeng.cc/2017/03/21/linux-apache/</url>
      <content type="html"><![CDATA[<h2 id="linux-下安装配置-apache"><a href="#linux-下安装配置-apache" class="headerlink" title="linux 下安装配置 apache"></a>linux 下安装配置 apache</h2><p>本文介绍linux下安装apache服务器的流程,默认系统为ubuntu，安装apache2。<br>写这篇博客的只要用于备忘<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fdy9npr95ig300o00o741.gif" alt="斜眼笑">。<br><a id="more"></a></p>
<h2 id="linux-下apache2"><a href="#linux-下apache2" class="headerlink" title="linux 下apache2"></a>linux 下apache2</h2><p><strong> 更新本地软件库的索引 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure></p>
<p><strong> 安装服务器 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apache2</div></pre></td></tr></table></figure></p>
<p><strong> 查看服务器版本 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 二选一</span></div><div class="line">apachectl -v  </div><div class="line">httpd -v</div></pre></td></tr></table></figure></p>
<h2 id="Linux系统为Ubuntu"><a href="#Linux系统为Ubuntu" class="headerlink" title="Linux系统为Ubuntu"></a>Linux系统为Ubuntu</h2><p><strong> Start Apache 2 Server /启动apache服务 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> /etc/init.d/apache2 star</div><div class="line">or</div><div class="line">$ sudo /etc/init.d/apache2 start</div></pre></td></tr></table></figure></p>
<p><strong> Restart Apache 2 Server /重启apache服务 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/apache2 restart</div><div class="line">or</div><div class="line">$ sudo /etc/init.d/apache2 restart</div></pre></td></tr></table></figure></p>
<p><strong> Stop Apache 2 Server /停止apache服务 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> /etc/init.d/apache2 stop</div><div class="line">or</div><div class="line">$ sudo /etc/init.d/apache2 stop</div></pre></td></tr></table></figure></p>
<h2 id="其他linux-下-apache启动、停止、重启命令"><a href="#其他linux-下-apache启动、停止、重启命令" class="headerlink" title="其他linux 下 apache启动、停止、重启命令"></a>其他linux 下 apache启动、停止、重启命令</h2><p>基本的操作方法：<br>本文假设你的apahce安装目录为<code>/usr/local/apache2</code>，这些方法适合任何情况<br><strong> apahce启动命令：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/apache2/bin/apachectl start apaceh</div></pre></td></tr></table></figure></p>
<p><strong> apache停止命令: </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/apache2/bin/apachectl stop</div></pre></td></tr></table></figure></p>
<p><strong> apache重新启动命令： </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/apache2/bin/apachectl restart</div></pre></td></tr></table></figure></p>
<p><strong> 要在重启 Apache 服务器时不中断当前的连接，则应运行：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/sbin/apachectl graceful</div></pre></td></tr></table></figure></p>
<p><strong> 如果apache安装成为linux的服务的话，可以用以下命令操作： </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">service httpd start 启动</div><div class="line">service httpd restart 重新启动</div><div class="line">service httpd stop 停止服务</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网页上传日志]]></title>
      <url>http://www.cmeng.cc/2017/03/21/uploadDiary/</url>
      <content type="html"><![CDATA[<h2 id="网页上传日志"><a href="#网页上传日志" class="headerlink" title="网页上传日志"></a>网页上传日志</h2><p>本次上传内容主要是各种特效，主要是canvas特效和css特效。<br>不久之前，楼主发现了一个有意思的网站，主要是关于各种网页特效等，<a href="https://tympanus.net/codrops/" target="_blank" rel="external"><strong>原网站传送门</strong></a>。<br>本文主要列举其中几个css的特效，为了防止忘记原网址也为了美化一下服务器，就自（臭）告（不）奋（要）勇（脸）的下载并修改了几个原始网页，上传到我的服务器。。。<br><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fdy9npr95ig300o00o741.gif" alt="斜眼笑"><br><a id="more"></a></p>
<h2 id="css特效"><a href="#css特效" class="headerlink" title="css特效"></a>css特效</h2><h4 id="元素hover特效"><a href="#元素hover特效" class="headerlink" title="元素hover特效"></a>元素hover特效</h4><ol>
<li><a href="http://115.159.92.11/specialEffects/css/CreativeLinkEffects/" target="_blank" rel="external"><strong>Creative Link Effects</strong></a></li>
<li><a href="http://115.159.92.11/specialEffects/css/CreativeButtons/" target="_blank" rel="external"><strong>Creative Button Styles</strong></a></li>
<li><a href="http://115.159.92.11/specialEffects/css/IconHoverEffects" target="_blank" rel="external"><strong>Icon Hover Effects</strong></a></li>
<li><a href="https://tympanus.net/Development/AnimatedSVGIcons/" target="_blank" rel="external"><strong>Animated SVG Icons</strong></a></li>
</ol>
<h4 id="元素点击特效"><a href="#元素点击特效" class="headerlink" title="元素点击特效"></a>元素点击特效</h4><p><a href="https://tympanus.net/Development/ProgressButtonStyles/" target="_blank" rel="external"><strong>Progress Button Styles</strong></a></p>
<h2 id="js实现特效"><a href="#js实现特效" class="headerlink" title="js实现特效"></a>js实现特效</h2><ol>
<li><a href="http://115.159.92.11/specialEffects/js/tagCloud-3D/" target="_blank" rel="external"><strong>球状标签云</strong></a></li>
</ol>
<h2 id="canvas特效"><a href="#canvas特效" class="headerlink" title="canvas特效"></a>canvas特效</h2><ol>
<li><a href="http://115.159.92.11/specialEffects/canvas/fireworks/" target="_blank" rel="external"><strong>烟花特效</strong></a></li>
<li><a href="http://115.159.92.11/specialEffects/canvas/zhihuLogin/" target="_blank" rel="external"><strong>知乎登陆背景</strong></a></li>
<li><a href="http://115.159.92.11/specialEffects/canvas/timer" target="_blank" rel="external"><strong>canva绘制时钟</strong></a> </li>
</ol>
<h2 id="一些炫酷的网站链接"><a href="#一些炫酷的网站链接" class="headerlink" title="一些炫酷的网站链接"></a>一些炫酷的网站链接</h2><p><a href="http://blacknegative.com" target="_blank" rel="external"><strong>blacknegative</strong></a><br><a href="http://www.georgeandjonathan.com/" target="_blank" rel="external"><strong>George &amp; Jonathan III</strong></a><br><a href="http://www.3gcs.com/" target="_blank" rel="external"><strong>另一种烟花特效</strong></a><br><a href="http://www.hugoware.net" target="_blank" rel="external"><strong>hugoware</strong></a></p>
<h4 id="3d特效网站"><a href="#3d特效网站" class="headerlink" title="3d特效网站"></a>3d特效网站</h4><p><a href="https://threejs.org/" target="_blank" rel="external"><strong>three.js</strong></a><br><a href="http://i-remember.fr/en/" target="_blank" rel="external"><strong>I Remember</strong></a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[模块化与WebPack学习教程]]></title>
      <url>http://www.cmeng.cc/2017/02/25/webpack_jiao_cheng/</url>
      <content type="html"><![CDATA[<h2 id="模块化与WebPack学习教程"><a href="#模块化与WebPack学习教程" class="headerlink" title="模块化与WebPack学习教程"></a>模块化与WebPack学习教程</h2><p>本文主要介绍模块化以及打包工具WebPack的使用。<br>关于webpack使用部分转载自<a href="http://www.jianshu.com/p/b95bbcfc590d" target="_blank" rel="external">简书-WebPack简明学习教程 by hutou</a><br><a id="more"></a></p>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul>
<li>模块就是实现特定功能的文件。</li>
<li>模块化是一种处理复杂系统分解成为更好的可管理模块的方式，把系统代码划分为一系列职责单一，高度解耦且可替换的模块，提高系统的可维护性。</li>
</ul>
<h2 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h2><blockquote>
<ol>
<li>一个打包工具</li>
<li>一个模块加载工具</li>
<li>各种资源都可以当成模块来处理</li>
<li>网站 <a href="http://webpack.github.io/" target="_blank" rel="external">http://webpack.github.io/</a></li>
</ol>
</blockquote>
<p>如今，越来越多的JavaScript代码被使用在页面上，我们添加很多的内容在浏览器里。如何去很好的组织这些代码，成为了一个必须要解决的难题。</p>
<p>对于模块的组织，通常有如下几种方法：</p>
<ol>
<li>通过书写在不同文件中，使用script标签进行加载</li>
<li>CommonJS进行加载（NodeJS就使用这种方式）</li>
<li>AMD进行加载（require.js使用这种方式）</li>
<li>ES6模块</li>
</ol>
<p><strong>思考：为什么只有JS需要被模块化管理，前台的很多预编译内容，不需要管理吗？</strong></p>
<p>基于以上的思考，WebPack项目有如下几个目标：</p>
<ul>
<li>将依赖树拆分，保证按需加载</li>
<li>保证初始加载的速度</li>
<li>所有静态资源可以被模块化</li>
<li>可以整合第三方的库和模块</li>
<li>可以构造大系统</li>
</ul>
<p>从下图可以比较清晰的看出WebPack的功能<br><img src="http://upload-images.jianshu.io/upload_images/401663-3b68765ce208588f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="webpack功能"></p>
<p><strong>WebPack的特点</strong></p>
<ul>
<li>丰富的插件，方便进行开发工作</li>
<li>大量的加载器，包括加载各种静态资源</li>
<li>代码分割，提供按需加载的能力</li>
<li>发布工具</li>
</ul>
<p><strong>WebPack的优势</strong></p>
<blockquote>
<ul>
<li>webpack 是以 commonJS 的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。</li>
<li>能被模块化的不仅仅是 JS 了。</li>
<li>开发便捷，能替代部分 grunt/gulp 的工作，比如打包、压缩混淆、图片转base64等。</li>
<li>扩展性强，插件机制完善，特别是支持 React 热插拔（见 react-hot-loader ）的功能让人眼前一亮。</li>
</ul>
</blockquote>
<h2 id="WebPack的安装"><a href="#WebPack的安装" class="headerlink" title="WebPack的安装"></a>WebPack的安装</h2><ol>
<li><p>安装命令</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install webpack -g</div></pre></td></tr></table></figure>
</li>
<li><p>使用webpack</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm init <span class="comment">#会自动生产一个 package.json文件</span></div><div class="line">$ npm install webpack --save-dev <span class="comment">#将webpack增加到package.json 文件中</span></div></pre></td></tr></table></figure>
</li>
<li><p>可以使用不同的版本</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install webpack@<span class="number">1.2</span>.x --save-dev</div></pre></td></tr></table></figure>
</li>
<li><p>如果想安装开发工具</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install webpack-dev-server --save-dev</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="WebPack的配置"><a href="#WebPack的配置" class="headerlink" title="WebPack的配置"></a>WebPack的配置</h2><blockquote>
<p>每个项目下都必须配置有一个 webpack.config.js ，它的作用如同常规的 gulpfile.js/Gruntfile.js ，就是一个配置项，告诉 webpack 它需要做什么。</p>
</blockquote>
<p>下面是一个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var webpack = require(<span class="string">'webpack'</span>);</div><div class="line">var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">    //插件项</div><div class="line">    plugins: [commonsPlugin],</div><div class="line">    //页面入口文件配置</div><div class="line">    entry: &#123;</div><div class="line">        index : <span class="string">'./src/js/page/index.js'</span></div><div class="line">    &#125;,</div><div class="line">    //入口文件输出配置</div><div class="line">    output: &#123;</div><div class="line">        path: <span class="string">'dist/js/page'</span>,</div><div class="line">        filename: <span class="string">'[name].js'</span></div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        //加载器配置</div><div class="line">        loaders: [</div><div class="line">            &#123; <span class="built_in">test</span>: /\.css$/, loader: <span class="string">'style-loader!css-loader'</span> &#125;,</div><div class="line">            &#123; <span class="built_in">test</span>: /\.js$/, loader: <span class="string">'jsx-loader?harmony'</span> &#125;,</div><div class="line">            &#123; <span class="built_in">test</span>: /\.scss$/, loader: <span class="string">'style!css!sass?sourceMap'</span>&#125;,</div><div class="line">            &#123; <span class="built_in">test</span>: /\.(png|jpg)$/, loader: <span class="string">'url-loader?limit=8192'</span>&#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    //其它解决方案配置</div><div class="line">    resolve: &#123;</div><div class="line">        root: <span class="string">'E:/github/flux-example/src'</span>, //绝对路径</div><div class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>],</div><div class="line">        <span class="built_in">alias</span>: &#123;</div><div class="line">            AppStore : <span class="string">'js/stores/AppStores.js'</span>,</div><div class="line">            ActionType : <span class="string">'js/actions/ActionType.js'</span>,</div><div class="line">            AppAction : <span class="string">'js/actions/AppAction.js'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<ol>
<li>plugins 是插件项，这里我们使用了一个 CommonsChunkPlugin的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用。</li>
<li>entry 是页面入口文件配置，output 是对应输出项配置 （即入口文件最终要生成什么名字的文件、存放到哪里）</li>
<li>module.loaders 是最关键的一块配置。它告知 webpack 每一种文件都需要使用什么加载器来处理。 所有加载器需要使用npm来加载</li>
<li>最后是 resolve 配置，配置查找模块的路径和扩展名和别名（方便书写）</li>
</ol>
<h2 id="WebPack开始使用"><a href="#WebPack开始使用" class="headerlink" title="WebPack开始使用"></a>WebPack开始使用</h2><ol>
<li>正确安装了WebPack，方法可以参考上面</li>
<li><p>书写entry.js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(<span class="string">"看看如何让它工作！"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>书写index.html文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"bundle.js"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>执行命令，生成bundle.js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack ./entry.js bundle.js</div></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中打开index.html文件，可以正常显示出预期</p>
</li>
<li><p>增加一个content.js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">module.exports = <span class="string">"现在的内容是来自于content.js文件！"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>修改entry.js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(require(<span class="string">"./content.js"</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>执行第四步的命令</p>
</li>
</ol>
<p><strong>进行加载器试验</strong></p>
<ol>
<li><p>增加style.css文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">background: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>修改entry.js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">require(<span class="string">"!style!css!./style.css"</span>);</div><div class="line">document.write(require(<span class="string">"./content.js"</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>执行命令，安装加载器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install css-loader style-loader   <span class="comment"># 安装的时候不使用 -g</span></div></pre></td></tr></table></figure>
</li>
<li><p>执行webpack命令，运行看效果</p>
</li>
<li><p>可以在命令行中使用loader</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack ./entry.js bundle.js --module-bind <span class="string">"css=style!css"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>使用配置文件</strong><br>默认的配置文件为webpack.config.js</p>
<ol>
<li><p>增加webpack.config.js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line"> entry: <span class="string">"./entry.js"</span>,</div><div class="line"> output: &#123;</div><div class="line">     path: __dirname,</div><div class="line">     filename: <span class="string">"bundle.js"</span></div><div class="line"> &#125;,</div><div class="line"> module: &#123;</div><div class="line">     loaders: [</div><div class="line">         &#123; <span class="built_in">test</span>: /\.css$/, loader: <span class="string">"style!css"</span> &#125;</div><div class="line">     ]</div><div class="line"> &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>执行程序</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>发布服务器</strong></p>
<ol>
<li><p>安装服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install webpack-dev-server -g</div><div class="line">$ webpack-dev-server --progress --colors</div></pre></td></tr></table></figure>
</li>
<li><p>服务器可以自动生成和刷新，修改代码保存后自动更新画面</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080/webpack-dev-server/bundle</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript 笔试题 续]]></title>
      <url>http://www.cmeng.cc/2016/11/15/Javascript_Written_Test_2/</url>
      <content type="html"><![CDATA[<h2 id="javascript-笔试题-续"><a href="#javascript-笔试题-续" class="headerlink" title="javascript 笔试题 续"></a>javascript 笔试题 续</h2><p>这些题目涉及对象的闭包,有万恶之源 <strong> this </strong> , 于是我把它们单独拉出一个板块，文章最后是我看完这些题之后含泪推荐一本书。。。<br><img src="http://ww3.sinaimg.cn/large/0065ewYjgw1f9t6gul26fj301s01s0si.jpg" alt="哭"><br><a id="more"></a></p>
<h4 id="先来一道简单的开胃菜"><a href="#先来一道简单的开胃菜" class="headerlink" title="先来一道简单的开胃菜"></a>先来一道简单的开胃菜</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var arr=[];</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>()&#123;</div><div class="line">  <span class="keyword">for</span>(var i=0;i&lt;4;i++)&#123;</div><div class="line">    var x=&#123;&#125;;</div><div class="line">    x.no=i; // 无关代码，可忽略</div><div class="line">    x.text=arr[i];// 无关代码，可忽略</div><div class="line">    x.fun=<span class="function"><span class="title">function</span></span>()&#123;console.log(i)&#125;;</div><div class="line">    arr.push(x);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">fun();</div><div class="line">arr[0].fun();</div><div class="line">arr[1].fun();</div><div class="line">arr[2].fun();</div><div class="line">arr[3].fun();</div></pre></td></tr></table></figure>
<p><strong> 分析： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fun() 执行结束之后：</div><div class="line">      i = 4;</div><div class="line">      arr数组中所有元素都是对象,</div><div class="line">      而对象中的fun为：function()&#123;console.log(i)&#125;;</div><div class="line">  所以所有输出都是 4</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="下面是主菜，主要涉及对-this和变量作用域的理解"><a href="#下面是主菜，主要涉及对-this和变量作用域的理解" class="headerlink" title="下面是主菜，主要涉及对 this和变量作用域的理解"></a>下面是主菜，主要涉及对 this和变量作用域的理解</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">window.a=300;</div><div class="line"> <span class="keyword">function</span> <span class="function"><span class="title">fn1</span></span>()&#123;</div><div class="line">   this.a=100;</div><div class="line">   this.b=200;</div><div class="line">   <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">     alert(this.a);</div><div class="line">   &#125;.call(arguments[0]);</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">function</span> <span class="function"><span class="title">fn2</span></span>()&#123;</div><div class="line">   this.a=new fn1();</div><div class="line">        //&#123;a:100,b:200&#125;</div><div class="line"> &#125;</div><div class="line"> var a=new fn1().b;//300</div><div class="line"> //a:200</div><div class="line"> var v=new fn1(fn2());//200</div><div class="line"> //a:&#123;a:100,b:200&#125;//[object Object]</div><div class="line"> //v:&#123;a:100,b:200&#125;</div></pre></td></tr></table></figure>
<p><strong> 提示： </strong></p>
<ul>
<li>this指 调用 函数/属性的元素，或是 new 出的新元素，所有无主的 this 都指 window * </li>
</ul>
<p><strong> 分析： </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">第一步：</div><div class="line">  var a = new fn1().b</div><div class="line">  1.1):  new 完得到 &#123;a:100; b:200;&#125;</div><div class="line">      <span class="built_in">return</span> 的函数被 call()强行调用,由于没有传参 ==&gt; argument[0] = undefined,即call函数绑定 this 为 undefined ==&gt; this代表 window  ==&gt;  alert (wondow.a) ==&gt; 300;</div><div class="line">   1.2): var a = &#123;a:100; b:200;&#125;.b alert (200)</div><div class="line"></div><div class="line">第二步：</div><div class="line">  var v = new fn1(fn2())</div><div class="line">  2.1): 先执行 fn2() 函数: this.a = new fn1();</div><div class="line">      注意：此处 this 指 window  且此时 window.a 由 1.2 改为 200;</div><div class="line">      同 1.1 ==&gt; alert(window.a) ==&gt; 200</div><div class="line">      最后 window.a =&#123;a:100; b:200;&#125;;</div><div class="line">      注意：没有返回值 ==&gt;  返回undefined</div><div class="line">  2.2): ==&gt; v = new fn1() ==&gt; alert(window.a) ==&gt; [object,Object]</div></pre></td></tr></table></figure></p>
<p><strong> 运行效果：为了截图方便，alert 变为 console 输出 </strong><br><img src="http://ww1.sinaimg.cn/large/0065ewYjgw1f9ubig3ecij30e603fdfv.jpg" alt="运行效果"></p>
<h4 id="另一道主菜。。。"><a href="#另一道主菜。。。" class="headerlink" title="另一道主菜。。。"></a>另一道主菜。。。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var number=2;</div><div class="line">var obj=&#123;</div><div class="line">    number:4,</div><div class="line">    fn1:(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      // 此处 this 指window，执行后 window.number =&gt; 4</div><div class="line">      this.number*=2;</div><div class="line">      // 无用代码，根据声明提前，此处number 为局部变量，无论此处如何操作都会在下一行重新赋值为3</div><div class="line">      // 不过此处不会报错，未经赋值， number 为 undefined</div><div class="line">      number*=2;  // ==&gt; number = NaN</div><div class="line">      var number=3;</div><div class="line">      <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        // this 指 window</div><div class="line">        this.number*=2;</div><div class="line">        number*=3;</div><div class="line">        console.log(number);</div><div class="line">      &#125;</div><div class="line">    &#125;)()</div><div class="line">  &#125;</div><div class="line">  var fn1=obj.fn1;</div><div class="line">  console.log(number);</div><div class="line">  fn1();</div><div class="line">  obj.fn1();</div></pre></td></tr></table></figure>
<p><strong> 分析： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">执行自调函数 ==&gt; fn1 : function()&#123; </div><div class="line">                // 此处 this 指window</div><div class="line">                        this.number*=2;</div><div class="line">                // 此处 number 是闭包保护变量，值为 3</div><div class="line">                        number*=3;</div><div class="line">                        console.log(number);</div><div class="line">                    &#125;</div><div class="line">第一步：var fn1 = obj.fn1; // 单纯引用，没有执行函数，不会有输出</div><div class="line"></div><div class="line">第二步：console.log(number); // 输出全局变量 number ==&gt; 4 : 在执行自调函数时改变</div><div class="line"></div><div class="line">第三步：fn1();  ==&gt; 输出闭包中的 number ==&gt; 3*3 ==&gt; 9</div><div class="line"></div><div class="line">第四步：obj.fn1(); ==&gt; 输出闭包中的 number ==&gt; 9*3 ==&gt; 27</div><div class="line">        注意：obj.fn1() 中的 this.number ==&gt;  obj.number</div></pre></td></tr></table></figure></p>
<p><strong> 运行效果 </strong><br><img src="http://ww1.sinaimg.cn/large/0065ewYjgw1f9ubkpc6k1j30dy030749.jpg" alt="运行效果"></p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>到此为止，所有的题目总结起来就是一个字“绕”，<br><img src="http://ww3.sinaimg.cn/large/0065ewYjgw1f9t6rtzwmrj304s064web.jpg" alt="javascript从入门到放弃"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript 笔试题]]></title>
      <url>http://www.cmeng.cc/2016/11/15/Javascript_Written_Test/</url>
      <content type="html"><![CDATA[<h2 id="javascript-笔试题"><a href="#javascript-笔试题" class="headerlink" title="javascript 笔试题"></a>javascript 笔试题</h2><p>最近朋友给我推荐了几道关于javascript闭包和面向对象的面试题，兴冲冲的看了一下，本来就没想过会很简单，但是看完之后依然一脸懵逼，写这篇博客梳理一遍知识点同时也引以为戒。。。<img src="http://ww3.sinaimg.cn/large/0065ewYjgw1f9t6gul26fj301s01s0si.jpg" alt="哭"><br>不过做完这些题之后不禁想到了一本书。。。<br><a id="more"></a></p>
<h2 id="考点：变量作用域"><a href="#考点：变量作用域" class="headerlink" title="考点：变量作用域"></a>考点：变量作用域</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var f=<span class="function"><span class="title">function</span></span>()&#123;var a=b=1;&#125;;</div><div class="line">f();</div><div class="line">console.log(b); //1</div><div class="line">console.log(a); //报错</div><div class="line"></div><div class="line">var i,j=0,fn=<span class="function"><span class="title">function</span></span>()&#123;var i=j=2;&#125;;</div><div class="line">fn();</div><div class="line">console.log(i,j);//undefined 2</div></pre></td></tr></table></figure>
<h4 id="知识点：js-中所有未定义直接使用的变量都默认为全局变量"><a href="#知识点：js-中所有未定义直接使用的变量都默认为全局变量" class="headerlink" title="知识点：js 中所有未定义直接使用的变量都默认为全局变量"></a>知识点：js 中所有未定义直接使用的变量都默认为全局变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">第一题:</div><div class="line">  var a=b=1 的赋值方式被计算机理解为：</div><div class="line">   var a=1;   b=1;</div><div class="line">  结果：a是局部变量，b是全局变量</div><div class="line">        console输出未定义的变量 -&gt; 报错</div><div class="line">所以：不要使用 连续赋值</div><div class="line"></div><div class="line">第二题:</div><div class="line">    j被当作全局变量重新赋值</div><div class="line">    i 是局部变量，对全局变量 i 没有影响，所以全局变量还是 未赋值 -&gt;undefined</div></pre></td></tr></table></figure>
<hr>
<h3 id="考点：setTimeout-函数特性"><a href="#考点：setTimeout-函数特性" class="headerlink" title="考点：setTimeout 函数特性"></a>考点：setTimeout 函数特性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var f=<span class="function"><span class="title">function</span></span>()&#123;var a=b=1;&#125;;</div><div class="line"><span class="built_in">set</span>Timeout(f,0);</div><div class="line">console.log(b);//报错</div></pre></td></tr></table></figure>
<h4 id="知识点：-setTimeout-函数会在当前作用域中最后执行"><a href="#知识点：-setTimeout-函数会在当前作用域中最后执行" class="headerlink" title="知识点： setTimeout 函数会在当前作用域中最后执行"></a>知识点： setTimeout 函数会在当前作用域中最后执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在本题中，console.log(b)实际上会在 setTimeout()函数之前执行，</div><div class="line">因而在执行 console.log(b)时 b 是未定义的变量 ==&gt; 报错。</div></pre></td></tr></table></figure>
<hr>
<h2 id="考点：闭包-gt-取闭包保护的内容"><a href="#考点：闭包-gt-取闭包保护的内容" class="headerlink" title="考点：闭包 -&gt; 取闭包保护的内容"></a>考点：闭包 -&gt; 取闭包保护的内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var o=(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">  var person=&#123;</div><div class="line">    name:<span class="string">'eric'</span>,</div><div class="line">    age:24</div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">return</span> &#123;</div><div class="line">    run:<span class="keyword">function</span>(k)&#123;</div><div class="line">      <span class="built_in">return</span> person[k];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h4 id="问：不改变以上代码，如何获得闭包中的person"><a href="#问：不改变以上代码，如何获得闭包中的person" class="headerlink" title="问：不改变以上代码，如何获得闭包中的person"></a>问：不改变以上代码，如何获得闭包中的person</h4><p><strong> 分析： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">首先：自调函数执行完之后的返回值赋值给 变量 o</div><div class="line">  所以 o = &#123;run : function(k)&#123;</div><div class="line">            return person[k];</div><div class="line">        &#125;&#125; </div><div class="line">   person = &#123;name:&apos;eric&apos;,age:24&#125;</div></pre></td></tr></table></figure></p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>  <strong> 定义访问器属性 返回自身 </strong><br>  <strong> 闭包函数调用自定义属性 </strong></p>
<p>有必要先说一下 Object.defineProperty 的用法：<br><strong> 语法 </strong><br>    Object.defineProperty(object, propertyname, descriptor)<br><strong> 参数 </strong></p>
<pre><code>* object *
  必需。  要在其上添加或修改属性的对象。  这可能是一个本机 JavaScript 对象（即用户定义的对象或内置对象）或 DOM 对象。  
propertyname
  必需。  一个包含属性名称的字符串。  
descriptor
  必需。  属性描述符。  它可以针对数据属性或访问器属性。  
</code></pre><p><strong> 返回值 </strong><br>      已修改对象。<br><a href="https://msdn.microsoft.com/library/dd548687(v=vs.94).aspx" target="_blank" rel="external">Object.defineProperty 用法传送门</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> Object.defineProperty(Object.prototype,<span class="string">"self"</span>,&#123;</div><div class="line">  get:<span class="function"><span class="title">function</span></span>()&#123;<span class="built_in">return</span> this;&#125;</div><div class="line">&#125;);</div><div class="line">var person_copy=o.run(<span class="string">"self"</span>);</div><div class="line"></div><div class="line">// 测试</div><div class="line">var person_copy=o.run(<span class="string">"self"</span>);</div><div class="line">console.log(o.run(<span class="string">"age"</span>));  // 24 =&gt; 闭包保护数据</div><div class="line">person_copy.age=-2;</div><div class="line">console.log(o.run(<span class="string">"age"</span>)); // -2  成功修改闭包</div></pre></td></tr></table></figure>
<p>// TODO ： 原理<br>// 个人对 Object.defineProperty 的了解不深</p>
<hr>
<h2 id="考点-：闭包-函数"><a href="#考点-：闭包-函数" class="headerlink" title="考点 ：闭包 函数"></a>考点 ：闭包 函数</h2><p>####先来一道简单的打底<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var a=0,b=0;</div><div class="line">var A=<span class="keyword">function</span>(a)&#123;</div><div class="line">  A=<span class="keyword">function</span>(b)&#123;</div><div class="line">    console.log(a+b++);</div><div class="line">  &#125;</div><div class="line">  console.log(a);</div><div class="line">&#125;</div><div class="line">A(1);//1</div><div class="line">A(12);//13</div></pre></td></tr></table></figure></p>
<p><strong> 分析： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.1): A(1) --&gt; 首次执行，A被重新赋值，输出参数 1，运行结束后：</div><div class="line">          A = function(b)&#123; // 此时变量 a=1 已被闭包保护</div><div class="line">            console.log( a + b++);</div><div class="line">          &#125;</div><div class="line">1.2): A(12) --&gt; console.log(a + 12++); ==&gt; 输出 13</div></pre></td></tr></table></figure></p>
<p><strong> 运行效果： </strong><br><img src="http://ww1.sinaimg.cn/large/0065ewYjgw1f9ubqdokwfj30ej041wej.jpg" alt="运行效果"></p>
<hr>
<h4 id="下面才是正餐："><a href="#下面才是正餐：" class="headerlink" title="下面才是正餐："></a>下面才是正餐：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> fun(n,o)&#123;</div><div class="line">   console.log(o);</div><div class="line">   <span class="built_in">return</span>&#123;</div><div class="line">     fun:<span class="keyword">function</span>(m)&#123;</div><div class="line">       <span class="built_in">return</span> fun(m,n);</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> var a=fun(0); a.fun(1); a.fun(2); a.fun(3);</div><div class="line">    //undefined     0        0          0    </div><div class="line"> var b=fun(0).fun(1).fun(2).fun(3);</div><div class="line">  //undefined   0      1      2     </div><div class="line"> var c=fun(0).fun(1); c.fun(2); c.fun(3);</div><div class="line">  //undefined   0          1         1</div></pre></td></tr></table></figure>
<h4 id="提问：三行代码输出的结果分别是什么"><a href="#提问：三行代码输出的结果分别是什么" class="headerlink" title="提问：三行代码输出的结果分别是什么"></a>提问：三行代码输出的结果分别是什么</h4><p><strong> 分析： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">第一行：</div><div class="line">  1.1): var a = fun(0) =&gt; 并没有传出参数 o =&gt; 输出 undefined，</div><div class="line">      a = &#123;  // 此时参数 n=0 已被闭包保护</div><div class="line">          fun:function(m)&#123;</div><div class="line">            return fun(m,n);</div><div class="line">       &#125;</div><div class="line">  1.2): a.fun(1) ==&gt; function(m=1)&#123; return fun(m,n);&#125;</div><div class="line">        输出闭包变量 n 的值，即 0;</div><div class="line">        而调用过程并没有修改变量 n, 所以 n = 0</div><div class="line">      ==&gt; a.fun(2) 输出 0</div><div class="line">      ==&gt; a.fun(3) 输出 0</div><div class="line">      ...</div><div class="line">      ==&gt; a.fun(x) 输出 0</div><div class="line"></div><div class="line">第二行: </div><div class="line">  2.1): 同 1.1</div><div class="line">  2.2): b.fun(1) ==&gt; function(m=1)&#123; return fun(m,n=0);&#125; ==&gt; 输出 n ,即 0</div><div class="line">     b = &#123;  // 此时 n 依然被闭包保护，不过值变为新的参数 1，</div><div class="line">          fun:function(m)&#123;</div><div class="line">            return fun(m,n &lt;== 1);</div><div class="line">       &#125;</div><div class="line">  2.3): 类似 2.2 推导， 输出：1，闭包变量 n = 2;</div><div class="line">    可得：本题链式调用每次输出闭包变量 n 值，n 的值为上次调用传入的参数</div><div class="line">    ... .fun(x-1).fun(x)  ==&gt; 最后输出 x-1</div><div class="line"></div><div class="line">第三行：</div><div class="line">  3.1): 同 2.1,2.2; 运行结束后：闭包变量 n -&gt; undefined -&gt; 0 -&gt; 1 </div><div class="line">  3.2): 同 1.2, 单步调用不修改变量 n, ==&gt; 一直输出 变量 n=&gt;1</div></pre></td></tr></table></figure></p>
<p><strong> 运行结果 </strong><br><img src="http://ww4.sinaimg.cn/large/0065ewYjgw1f9ubutjfw4j30fi08iglx.jpg" alt="运行结果"></p>
<hr>
<h2 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记首次使用hexo的尴尬历程]]></title>
      <url>http://www.cmeng.cc/2016/09/21/The_awkward_experience_of_first_use_Hexo/</url>
      <content type="html"><![CDATA[<h2 id="记首次使用hexo的尴尬历程"><a href="#记首次使用hexo的尴尬历程" class="headerlink" title="记首次使用hexo的尴尬历程"></a>记首次使用hexo的尴尬历程</h2><p>2016年9月19号，第一次听说<a href="https://hexo.io" target="_blank" rel="external">Hexo</a>。据说用这个框架可以很快搭建出一个漂亮的博客，正好朋友有这方面的需求，于是第二天尝试了一下，嗯，效果挺好，不过遇到一些坑。。。<br><a id="more"></a><br>我使用的主题是 <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">Yelee</a>，<a href="https://hexo.io/themes" target="_blank" rel="external">Hexo主题传送门</a></p>
<h3 id="坑1-站内搜索"><a href="#坑1-站内搜索" class="headerlink" title="坑1 : 站内搜索"></a>坑1 : 站内搜索</h3><p>本来一行命令就可以解决的事到我这边却莫名其妙的出了问题。。。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save hexo-generator-search</div></pre></td></tr></table></figure>
<p>最让我恼火的是不知道什么原因就好了，感觉一个多小时的查找都付之东流了。。。<br>不过我发现这个主题在手机和平板的竖屏状态下是没有搜索栏的，看了一下代码发现作者把搜索栏放到了左边栏的位置，竖屏后不好调整代码位置，索性直接隐藏了。我想尝试将搜索框完善一下，不过这样要改动的地方不会少，漫漫长路。。。</p>
<h3 id="坑2-tag-云"><a href="#坑2-tag-云" class="headerlink" title="坑2 : tag 云"></a>坑2 : tag 云</h3><p>文档创建tags文件,生成一个index.md文件，按文档所说（后来才知道我以为的并不是我以为的T_T）标签云在index.md文件中生成，于是我就把所有标签定义在index.md文件中，由此开启了悲惨之旅。。。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new post tags</div></pre></td></tr></table></figure>
<p>正确的理解是：tags中的index.md会集中显示标签，同时又不需要在index.md文件中定义任何标签，因为模板会将所有文件中的标签整合，去重，然后在tags里显示。<br>没错，事实是tags的index.md文件就是单纯的显示模块，而我花了一个多小时的时间去尝试改变标签的定义方式，标签云的引用，甚至于标签云样式的定义。。。表示已经哭晕在厕所。。。</p>
<h3 id="坑3-上传"><a href="#坑3-上传" class="headerlink" title="坑3 : 上传"></a>坑3 : 上传</h3><p>历经重重艰辛，终于到了上传的时刻。<br><img src="https://ws1.sinaimg.cn/large/0065ewYjgw1f81fut0ujwj302s02sdfv.jpg" alt="激动的图"><br>满怀期待的输入了 <strong> hexo d </strong>,Duang 的一下就弹出了一堆警告，仔细一看是编码问题：windows的CRLF,linux的LF，两家一直不对付，不过好在不影响效果,也就无所谓了。<br>然而紧接着就是一个华丽的报错：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error: bash: /dev/tty/:No such device or address</div><div class="line">error: failed to execute proment script (<span class="built_in">exit</span> code 1)</div></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/0065ewYjgw1f81gr9pmbtj30q70eidiu.jpg" alt="报错"></p>
<p>在网上折腾半小时之后我才想起来用的 <strong> ssh </strong>上传到 github,<strong> _config.yml </strong>文件的配置里居然用的 https,被自己蠢哭了。。。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: https://github.com:xxx/xxx.xxx.io.git</div><div class="line">  branch: [master]</div></pre></td></tr></table></figure>
<p>正确配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: git@github.com:xxx/xxx.xxx.io.git</div><div class="line">  branch: [master]</div></pre></td></tr></table></figure>
<p>问题解决，继续上传，<strong> hexo d </strong>,还是老一套的警告，没有报错证明确实是配置文件的协议有问题，然而就在我等这下文的时候它却华丽丽的停下了！没错，没有一点点防备的停下了，没有开始上传的提示，也没有报错，就这么停了。。。<br><img src="https://ws4.sinaimg.cn/large/0065ewYjgw1f81g6wqae2j30i40d242p.jpg" alt="hexo d"><br>当时我就懵逼了，不过经历一下午的坎坷，抗打击能力确实有所提高。。。话说我应该高兴吗。。。<br><img src="https://ws3.sinaimg.cn/large/0065ewYjgw1f81gf80qdij302s02smx4.jpg" alt="泪奔"><br>我决定等一等再说，不管是电脑卡了还是网络延迟又或者是后台传输（当然这是最好的情况）都不宜强行中断，而且当时网络确实不咋地。终于在我吃完饭之后看到了成功的讯号。。。话说时间也太长了吧。。。<br><img src="https://ws4.sinaimg.cn/large/0065ewYjgw1f81gnf925vj30ls05ijsn.jpg" alt="上传成功"></p>
<p>顺带提一句，我的同学告诉我hexo-deployer-git 插件使用ssh上传内容到github,但同时这个插件却没有输入密码的部分，因此总是报错：权限不足，于是他告诫我ssh不要有密码。我将ssh密码置为空之后果然没有出现他所说的报错。<br>但是从程序员的角度来说，虽然ssh本身有一层加密，但不能设密码这一点算是个小缺点。事实上本人并没有亲自试过能不能带密码上传，同学的错误代码也没有保留下来，因此希望有志之士试过之后告诉我。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery]]></title>
      <url>http://www.cmeng.cc/2016/09/20/jquery/</url>
      <content type="html"><![CDATA[<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p><strong>jQuery: $(document).ready(function(){…}) VS DOM: window.onload=function(){…}</strong><br>ready 的底层事件：DOM中的ondocumentcontentloaded:只要DOM树加载完成，就会触发<br>window.onload 在页面全部加载完成之后触发</p>
<a id="more"></a>
<p><strong>大致流程如图所示：</strong><br><img src="https://ws3.sinaimg.cn/large/0065ewYjgw1f825osk8jtj30kj06e0tj.jpg" alt="流程图"></p>
<p><strong>举例测试</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  &lt;h1&gt;页面加载完成事件&lt;/h1&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    console.time(<span class="string">"docReady"</span>);</div><div class="line">    console.time(<span class="string">"winLoad"</span>);</div><div class="line">  &lt;/script&gt;</div><div class="line">  &lt;script src=<span class="string">"../jquery-1.11.3.js"</span>&gt;&lt;/script&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    window.onload=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(<span class="string">"window.onload..."</span>);</div><div class="line">        console.timeEnd(<span class="string">"winLoad"</span>);</div><div class="line">    &#125;</div><div class="line">    $(document).ready(<span class="keyword">function</span>($) &#123;</div><div class="line">        console.log(<span class="string">"document ready..."</span>);</div><div class="line">        console.timeEnd(<span class="string">"docReady"</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">  &lt;/script&gt;</div><div class="line"> &lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p><strong>执行结果</strong><br><img src="https://ws1.sinaimg.cn/large/0065ewYjgw1f825p93mq0j30fl02bmxb.jpg" alt="执行结果"></p>
<p>&nbsp;&nbsp;事实上：将script放在body结尾也能实现 ready 的功能：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  &lt;h1&gt;页面加载完成事件&lt;/h1&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    console.time(<span class="string">"docReady"</span>);</div><div class="line">    console.time(<span class="string">"winLoad"</span>);</div><div class="line">  &lt;/script&gt;</div><div class="line">  &lt;script src=<span class="string">"../jquery-1.11.3.js"</span>&gt;&lt;/script&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    window.onload=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(<span class="string">"window.onload..."</span>);</div><div class="line">        console.timeEnd(<span class="string">"winLoad"</span>);</div><div class="line">    &#125;</div><div class="line">    console.log(<span class="string">"document ready..."</span>);</div><div class="line">    console.timeEnd(<span class="string">"docReady"</span>);</div><div class="line">  &lt;/script&gt;</div><div class="line"> &lt;/body&gt;</div></pre></td></tr></table></figure></p>
<h3 id="显示-隐藏"><a href="#显示-隐藏" class="headerlink" title="显示/隐藏"></a>显示/隐藏</h3><p>&nbsp;&nbsp;jQuery中有 <strong>show()</strong>，<strong>hide()</strong>控制内容的显示和隐藏，但只能完成一个功能<br>toggle()函数可以同时完成显示和隐藏的功能<br>在不加参数的情况下：<strong>show(),hide(),toggle()</strong> 函数通过改变元素的 <strong>display</strong> 属性实现显示和隐藏，没有动画效果<br>加上参数：函数设置 <strong>overflow:hidden</strong>,通过将元素的 <strong>width，height和opacity</strong>属性逐渐变为 <strong>0</strong> 实现过度效果</p>
<h3 id="动画函数-animate"><a href="#动画函数-animate" class="headerlink" title="动画函数 animate()"></a>动画函数 animate()</h3><p>&nbsp;&nbsp; <strong>$(…).animate(parmes,speed,easing,fn)</strong><br>参数：<br>    parmes: css属性的目标值：{属性:值,属性:值 … }<br>        注意： <strong>css 属性名要去横线,变驼峰;值是字符串而且要加单位</strong> ==&gt;marginLeft:’12px’<br>    speed: 速度：数字（单位：ms）/字符串”slow/normal/fast”<br>    easing: 过度方式：linear(匀速)，ease(慢到快)。。。<br><strong>动画中的排队和并发(串行和并行)</strong><br>一个 <strong><em>animate</em></strong> 函数中修改的属性会同时修改，多个 <strong><em>animate</em></strong> 函数时会等前一个动画变换完再变换。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(...).animate(&#123;width:<span class="string">'200px'</span>,height:<span class="string">'200px'</span>&#125;,1000);</div></pre></td></tr></table></figure>
<p>执行效果：该元素的宽和高在1秒内都变为200px</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(...).animate(&#123;width:<span class="string">'200px'</span>&#125;,1000).animate(&#123;height:<span class="string">'200px'</span>&#125;,2000);</div></pre></td></tr></table></figure>
<p>执行效果：该元素的宽在1秒内都变为200px后，高在2秒内变为200px</p>
<p><strong>js回调函数中的 this 指window，animate函数中的回调函数指当前对象</strong> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://www.cmeng.cc/2016/09/20/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div><div class="line">$ hexo new <span class="string">"My New Post"</span></div><div class="line">$ hexo new <span class="string">"My New Post"</span></div><div class="line">$ hexo new <span class="string">"My New Post"</span></div><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[404]]></title>
      <url>http://www.cmeng.cc//404.html</url>
      <content type="html"><![CDATA[<p>&lt;!DOCTYPE HTML&gt;</p>
<html><br><head><br><meta http-equiv="content-type" content="text/html;charset=utf-8;"><br><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><br><meta name="robots" content="all"><br><meta name="robots" content="index,follow"><br><title>公益404页面 // CMeng的博客</title><br></head><br><body><br><script type="text/javascript" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="http://cmeng.cc" homepagename="CMeng的博客"></script><br></body><br></html>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[About me]]></title>
      <url>http://www.cmeng.cc/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[个人小游戏]]></title>
      <url>http://www.cmeng.cc/mygames/index.html</url>
      <content type="html"><![CDATA[<h2 id="欢迎体验我的小游戏"><a href="#欢迎体验我的小游戏" class="headerlink" title="欢迎体验我的小游戏"></a>欢迎体验我的小游戏</h2><h4 id="支持响应式"><a href="#支持响应式" class="headerlink" title="支持响应式"></a>支持响应式</h4><ol>
<li><a href="http://115.159.92.11/gobang" target="_blank" rel="external"><strong>五子棋</strong></a></li>
<li><a href="http://115.159.92.11/2048" target="_blank" rel="external"><strong>2048</strong></a></li>
<li><a href="http://115.159.92.11/tetris" target="_blank" rel="external"><strong>俄罗斯方块</strong></a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://www.cmeng.cc/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
