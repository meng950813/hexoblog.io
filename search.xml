<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Docker安装Neo4j]]></title>
      <url>http://www.cmeng.cc/2020/02/15/docker%E5%AE%89%E8%A3%85Neo4j/</url>
      <content type="html"><![CDATA[<p><strong>操作内容</strong></p>
<ol>
<li>Docker创建Neo4j的容器</li>
<li>导入已有数据库</li>
<li>创建过程中的注意事项<a id="more"></a>
<h3 id="Docker创建Neo4j的容器"><a href="#Docker创建Neo4j的容器" class="headerlink" title="Docker创建Neo4j的容器"></a>Docker创建Neo4j的容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 搜索镜像</span></div><div class="line">docker search neo4j</div><div class="line"><span class="comment"># 获取镜像</span></div><div class="line">docker pull neo4j:版本号</div><div class="line"><span class="comment"># 创建容器</span></div><div class="line">docker run \</div><div class="line">    --name neo4j \ <span class="comment"># 容器名</span></div><div class="line">    -p7474:7474 -p7687:7687 \ <span class="comment"># 端口映射</span></div><div class="line">    <span class="_">-d</span> \ <span class="comment"># 后台运行</span></div><div class="line">    -v <span class="variable">$HOME</span>/neo4j/data:/data \ <span class="comment"># 挂载数据库文件 =&gt; graph.db</span></div><div class="line">    -v <span class="variable">$HOME</span>/neo4j/logs:/logs \</div><div class="line">    -v <span class="variable">$HOME</span>/neo4j/import:/var/lib/neo4j/import \</div><div class="line">    -v <span class="variable">$HOME</span>/neo4j/plugins:/plugins \</div><div class="line">    <span class="_">-e</span> NEO4j_dbms_memory_pagecache_size=1G \ 设置缓存区，以提高查询效率</div><div class="line">    --env NEO4J_AUTH=username/password \ <span class="comment"># 设置用户名(默认neo4j)/密码</span></div><div class="line">    neo4j:latest <span class="comment"># 镜像版本</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="这之后就可以通过-http-localhost-7474-browser-这个地址访问-Neo4j-Server-的-WebUI，可以在上面查询、修改数据。"><a href="#这之后就可以通过-http-localhost-7474-browser-这个地址访问-Neo4j-Server-的-WebUI，可以在上面查询、修改数据。" class="headerlink" title="这之后就可以通过 http://localhost:7474/browser/ 这个地址访问 Neo4j Server 的 WebUI，可以在上面查询、修改数据。"></a>这之后就可以通过 <a href="http://localhost:7474/browser/" target="_blank" rel="external">http://localhost:7474/browser/</a> 这个地址访问 Neo4j Server 的 WebUI，可以在上面查询、修改数据。</h2><h3 id="导入已有数据库"><a href="#导入已有数据库" class="headerlink" title="导入已有数据库"></a>导入已有数据库</h3><ol>
<li>停止容器 docker stop 容器名/容器id</li>
<li>在挂载文件中替换 graph.db 文件</li>
<li>重启容器</li>
</ol>
<blockquote>
<p>详情可参考Github中提的Issus <a href="https://github.com/neo4j/docker-neo4j/issues/66" target="_blank" rel="external">Mapping an existing local neo4j database to a neo4j docker container</a></p>
</blockquote>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p> Neo4j的配置可以根据自己的情况适当地进行修改，完整的配置见<a href="https://neo4j.com/docs/operations-manual/current/configuration/" target="_blank" rel="external">文档</a>，个人认为比较重要的几个：</p>
<ul>
<li>认证方式设置<br>默认情况下启动的 neo4j，会要求在访问时通过用户名密码进行认证，初始的用户名密码为 neo4j/neo4j ，同时会在第一次认证之后要求更换密码。</li>
</ul>
<p>也可以主动设置好密码，非 docker 模式部署，需要在初次启动通过 neo4j-admin 命令设置<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">neo4j-admin <span class="built_in">set</span>-initial-password neo4j_password</div></pre></td></tr></table></figure></p>
<p>如果是 docker 模式部署，则在启动容器时通过环境变量 NEO4J_AUTH 来设置<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker run <span class="_">-d</span> \</div><div class="line">	   --name neo4j \</div><div class="line">       -p 7474:7474 -p 7687:7687 \</div><div class="line">       -v <span class="variable">$HOME</span>/neo4j/data/:/data \</div><div class="line">       <span class="_">-e</span> NEO4J_AUTH=neo4j/neo4j_password \</div><div class="line">       neo4j</div></pre></td></tr></table></figure></p>
<ul>
<li>内存设置<br>这块有三项设置，分别是<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dbms.memory.heap.initial_size</div><div class="line">dbms.memory.heap.max_size</div><div class="line">dbms.memory.pagecache.size</div></pre></td></tr></table></figure>
</li>
</ul>
<p>前两者决定了查询语言运行时候可用的内存，第三个则用于缓存数据和索引以提高查询效率。<br>非 docker 模式部署的，可以在 /conf/neo4j.conf 文件里修改<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dbms.memory.heap.initial_size=1G</div><div class="line">dbms.memory.heap.max_size=2G</div><div class="line">dbms.memory.pagecache.size=1G</div></pre></td></tr></table></figure></p>
<p>docker 模式部署则还是在启动容器时通过环境变量来设置，如下所示<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker run <span class="_">-d</span> \</div><div class="line">	   --name neo4j \</div><div class="line">       -p 7474:7474 -p 7687:7687 \</div><div class="line">       -v <span class="variable">$HOME</span>/neo4j/data/:/data \</div><div class="line">       <span class="_">-e</span> NEO4j_dbms_memory_heap_initial__size=1G \</div><div class="line">       <span class="_">-e</span> NEO4j_dbms_memory_heap_max__size=2G \</div><div class="line">       <span class="_">-e</span> NEO4j_dbms_memory_pagecache_size=1G \</div><div class="line">       neo4j</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 刷题记录(中等篇) NO.735 行星碰撞]]></title>
      <url>http://www.cmeng.cc/2018/09/21/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%B8%AD%E7%AD%89%E7%AF%87)735-%E8%A1%8C%E6%98%9F%E7%A2%B0%E6%92%9E/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>给定一个整数数组 asteroids，表示在同一行的行星。<br>对于数组中的每一个元素，其绝对值表示行星的大小，正负表示行星的移动方向（正表示向右移动，负表示向左移动）。每一颗行星以相同的速度移动。<br>找出碰撞后剩下的所有行星。碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞。<br><strong>说明：</strong></p>
<ul>
<li>数组 asteroids 的长度不超过 10000。</li>
<li>每一颗行星的大小都是非零整数，范围是 [-1000, 1000] 。<a id="more"></a>
<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvhaeh966oj30o408l74a" alt="示例1-2"><br><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvhaes5l7mj30o5094t8r" alt="示例3-4"></li>
</ul>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用栈先进后出的特性，若栈外元素与栈顶元素发生碰撞，则这两个一定是距离最近，本该相撞的元素<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fdy9npr95ig300o00o741.gif" alt="斜眼笑"></p>
<p><strong>伪代码</strong></p>
<pre><code>1、 定义一个栈并遍历所有陨石
2、 若栈空或栈顶元素与新元素不会相撞（陨石同向或背道而驰==&gt;栈顶负，栈外正），新元素入栈
3、 否则两陨石相撞，进行比较（此时栈顶元素一定为正）：
    3.1、 若栈外陨石更大,弹出栈顶元素（陨石被撞碎）,栈外陨石继续与新栈顶元素比较
    3.2、 若同样大，栈顶陨石出栈，同时栈外换下一个陨石
    3.3、 若栈顶陨石大，栈不做任何操作
</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># with Python</span></div><div class="line"></div><div class="line">def asteroidCollision(self, asteroids):</div><div class="line">    <span class="string">""</span><span class="string">"</span></div><div class="line">    :type asteroids: List[int]</div><div class="line">    :rtype: List[int]</div><div class="line">    "<span class="string">""</span></div><div class="line">    ls = []</div><div class="line">    x = 0</div><div class="line">    <span class="keyword">while</span> x &lt; len(asteroids):</div><div class="line">        <span class="keyword">if</span> ls == [] or (ls[-1] * asteroids[x] &gt; 0) or (ls[-1] &lt; 0 and asteroids[x] &gt; 0):</div><div class="line">            ls.append(asteroids[x])</div><div class="line">        <span class="comment"># 会撞,且栈顶陨石为正</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 栈内陨石被撞碎,栈外陨石继续与新栈顶陨石比较</span></div><div class="line">            <span class="keyword">if</span> ls[-1] + asteroids[x] &lt; 0:</div><div class="line">                ls.pop()</div><div class="line">                x -= 1</div><div class="line">            </div><div class="line">            <span class="comment"># 全碎</span></div><div class="line">            <span class="keyword">elif</span> t + asteroids[x] == 0:</div><div class="line">                ls.pop()</div><div class="line">            <span class="comment"># else 栈外陨石被撞碎</span></div><div class="line">                </div><div class="line">        x += 1</div><div class="line">    <span class="built_in">return</span> ls</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 刷题记录(简单篇) NO.455 分发饼干]]></title>
      <url>http://www.cmeng.cc/2018/09/21/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E7%AE%80%E5%8D%95%E7%AF%87)455-%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ,这是能让孩子们满足胃口的饼干的最小尺寸;并且每块饼干 j ，都有一个尺寸 sj 。如果 sj &gt;= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>
<p><strong>说明：</strong></p>
<ul>
<li>假设胃口值为正。</li>
<li>一个小朋友最多只能拥有一块饼干。<a id="more"></a>
<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvha5ujf94j30o70bw74d" alt="示例"></li>
</ul>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>简单的匹配问题，只需要将两个数组排序，用孩子的胃口匹配对应的饼干，直到匹配孩子或饼干全部匹配<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fdy9npr95ig300o00o741.gif" alt="斜眼笑"></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># with Python</span></div><div class="line"></div><div class="line">def findContentChildren(self, g, s):</div><div class="line">    <span class="string">""</span><span class="string">"</span></div><div class="line">    :type g: List[int]</div><div class="line">    :type s: List[int]</div><div class="line">    :rtype: int</div><div class="line">    "<span class="string">""</span></div><div class="line">    g = sorted(g)</div><div class="line">    s = sorted(s)</div><div class="line">    </div><div class="line">    x, y,count = 0, 0, 0</div><div class="line">    <span class="keyword">while</span> x &lt; len(g) and y &lt; len(s):</div><div class="line">        <span class="comment"># 孩子可以被满足</span></div><div class="line">        <span class="keyword">if</span> g[x] &lt;= s[y]:</div><div class="line">            count += 1</div><div class="line">            x ,y = x+1,y+1</div><div class="line">        <span class="comment"># 不能被满足 =&gt; 换一块更大的饼干</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            y += 1</div><div class="line">            </div><div class="line">    <span class="built_in">return</span> count</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 刷题记录(简单篇) NO.268 缺失数字]]></title>
      <url>http://www.cmeng.cc/2018/09/21/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E7%AE%80%E5%8D%95%E7%AF%87)268-%E7%BC%BA%E5%A4%B1%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。</p>
<a id="more"></a>
<p><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvhf2ke3fuj30ny05mt8l" alt="示例"></p>
<p><strong>注意：</strong> 算法应具有线性时间复杂度。尽量仅使用额外常数空间来实现</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><pre><code>排序(快排)     ==&gt; O(nlogn)
查找(二分法)   ==&gt; O(logn)
时间复杂度 O(nlogn)
空间复杂度 O(1)
</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># with Python</span></div><div class="line">def missingNumber(self, nums):</div><div class="line">  </div><div class="line">    nums = sorted(nums)</div><div class="line">    <span class="comment"># print(nums)</span></div><div class="line">    <span class="keyword">if</span> nums[0] != 0:</div><div class="line">        <span class="built_in">return</span> 0</div><div class="line">    <span class="keyword">if</span> nums[-1] == len(nums)-1:</div><div class="line">        <span class="built_in">return</span> len(nums)</div><div class="line">    </div><div class="line">    last = 0</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> len(nums) &gt; 2:</div><div class="line">        mid = len(nums) // 2</div><div class="line">        <span class="keyword">if</span> nums[mid] == mid + last:</div><div class="line">            nums = nums[mid:]</div><div class="line">            last += mid</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            nums = nums[:mid+1]</div><div class="line">        <span class="comment"># print(nums,mid,last)</span></div><div class="line">        </div><div class="line">    <span class="built_in">return</span> (nums[0]+nums[1])//2</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 刷题记录(中等篇) NO.55 跳跃游戏]]></title>
      <url>http://www.cmeng.cc/2018/09/21/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%B8%AD%E7%AD%89%E7%AF%87)55-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>给定一个非负整数数组，你最初位于数组的第一个位置。<br>数组中的每个元素代表你在该位置可以跳跃的最大长度。<br>判断你是否能够到达最后一个位置。<br><a id="more"></a></p>
<p><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvh9ic5y89j30of06y74a" alt="示例"></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><pre><code>使用贪心算法：每次跳跃都选择覆盖范围最大的点,这样每次跳跃才有最多的选择,即覆盖全部可能的跳法。 
伪代码：
1、 若数组长度为 1,则当前就在目的地，返回 true
2、 定义变量 position 表示当前所在位置
3、 循环，当 position &gt;= len(nums) 时结束循环（可有可无）
    3.1、 判断当前位置的跳跃长度是否为0。若是，返回 False  
    3.2、 判断从当前位置能否跳跃到最终点。若能，返回 True
    3.3、 遍历当前位置可跳范围内能跳最远的点作为本次跳跃的目标
</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># with Python</span></div><div class="line"></div><div class="line">def canJump(self, nums):</div><div class="line">    <span class="keyword">if</span> len(nums) == 1:</div><div class="line">        <span class="built_in">return</span> True</div><div class="line"></div><div class="line">    position = 0</div><div class="line">    <span class="keyword">while</span> position &lt; len(nums):</div><div class="line"></div><div class="line">        <span class="keyword">if</span> nums[position] == 0:</div><div class="line">            <span class="built_in">return</span> False</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> position+nums[position]+1 &gt;= len(nums):</div><div class="line">            <span class="built_in">return</span> True</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment"># max_step : 表示当前位置所有可跳点中能跳的最远距离</span></div><div class="line">        <span class="comment"># next_step: 表示本次应该跳到的位置</span></div><div class="line">        max_step,next_step = 0, 0</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(position+1 , position+nums[position]+1):</div><div class="line">            <span class="keyword">if</span> nums[x] + x &gt; max_step:</div><div class="line">                max_step = nums[x] + x</div><div class="line">                next_step = x</div><div class="line">                </div><div class="line">        position = next_step</div><div class="line">    <span class="built_in">return</span> True</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 刷题记录(困难篇) NO.45 跳跃游戏Ⅱ]]></title>
      <url>http://www.cmeng.cc/2018/09/21/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E5%9B%B0%E9%9A%BE%E7%AF%87)45-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%20II/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>给定一个非负整数数组，你最初位于数组的第一个位置。<br>数组中的每个元素代表你在该位置可以跳跃的最大长度。<br>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p>
<p><strong>说明：</strong></p>
<ul>
<li>假设你总是可以到达数组的最后一个位置。<a id="more"></a>
<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvh8ngddg6j30o60alglz" alt="示例"></li>
</ul>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>与 <a href="./todo">跳跃游戏（中等篇）</a> 相同，使用贪心算法解决。即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">每次都选择所有可跳点中能跳最远的点</div></pre></td></tr></table></figure></p>
<p><strong>伪代码</strong></p>
<pre><code>1、 判断数组长度，若长度为 1 ，返回0；否则，定义 count = 0，记录跳跃次数
2、 判断当前位置能否直接跳到终点，若能，返回 count + 1
3、 遍历所有位于当前位置下一跳范围内的点，计算其能跳的最远距离
4、 选择能跳最远的点，count+1,继续步骤 2
</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># with Python</span></div><div class="line"></div><div class="line">def jump(self, nums):</div><div class="line">    <span class="keyword">if</span> len(nums) &lt;= 2:</div><div class="line">        <span class="built_in">return</span> len(nums)-1</div><div class="line">    </div><div class="line">    position , count = 0, 0</div><div class="line">    <span class="keyword">while</span> position &lt; len(nums):</div><div class="line">        <span class="comment"># 当前位置，可以跳到最后</span></div><div class="line">        <span class="keyword">if</span> position + nums[position] + 1 &gt;= len(nums):</div><div class="line">            <span class="built_in">return</span> count + 1</div><div class="line">        </div><div class="line">        <span class="comment"># max_step: 下一跳范围内的点能达到的最远位置</span></div><div class="line">        <span class="comment"># next_step: 能跳到最远位置的点</span></div><div class="line"></div><div class="line">        max_step ,next_step = 0, 0</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(position + 1, position + nums[position] + 1):</div><div class="line">            <span class="keyword">if</span> nums[x] + x &gt; max_step:</div><div class="line">                max_step = nums[x] + x</div><div class="line">                next_step = x</div><div class="line">        position = next_step</div><div class="line">        count += 1</div><div class="line">        </div><div class="line">    <span class="built_in">return</span> count</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode刷题记录(中等篇)：NO.82 删除排序链表中的重复元素 II]]></title>
      <url>http://www.cmeng.cc/2018/09/21/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%B8%AD%E7%AD%89%E7%AF%87)82-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II/</url>
      <content type="html"><![CDATA[<p><strong>题目描述：</strong><br>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现的数字。<br><a id="more"></a></p>
<p><strong> 示例 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">输入:  1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</div><div class="line">输出:  1-&gt;2-&gt;5</div><div class="line"></div><div class="line">输入:  1-&gt;1-&gt;1-&gt;2-&gt;3</div><div class="line">输出:  2-&gt;3</div></pre></td></tr></table></figure></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>需要三个指针（指针初始关系：h-&gt;pre-&gt;p):</p>
<ul>
<li>指针 p，一往无前，遍历整个链表</li>
<li>指针 pre,在p之后，负责框选所有有重复值的元素</li>
<li>指针 h,指向上一个符合要求的元素（没有重复数字的元素），时刻准备抛弃有重复数字的节点<br>（指针初始关系：h-&gt;pre-&gt;p)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1、判断链表 head==NULL || head-&gt;next == NULL（为空或单节点）,若是,返回 head;否则</div><div class="line">2、判断链表是否 只有两个 节点，若是:</div><div class="line">	2.1、若两节点相同：返回NULL</div><div class="line">3、否则（链表有多于两个节点），若仅前两个节点相同（pre-&gt;val == h-&gt;val &amp;&amp; pre-&gt;val != p-&gt;val）,递归调用以 p 头结点的链表</div><div class="line">4、否则,直到 p == NULL 时结束循环：</div><div class="line">	4.1、循环查找，直到发现与 pre 不同的节点</div><div class="line">	4.2、若有与 pre 相同的节点(pre-&gt;next != p)，舍弃 pre 到 p 之间的节点</div><div class="line">	4.3、否则。三个指针全部后移</div></pre></td></tr></table></figure>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">// with C++</div><div class="line">ListNode* deleteDuplicates(ListNode* head) &#123;</div><div class="line">    <span class="keyword">if</span>(head == NULL || head-&gt;next == NULL)</div><div class="line">        <span class="built_in">return</span> head;</div><div class="line"></div><div class="line">    ListNode *h = head,*pre = head-&gt;next;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(pre-&gt;next == NULL &amp;&amp; pre-&gt;val == h-&gt;val)</div><div class="line">            <span class="built_in">return</span> NULL;</div><div class="line"></div><div class="line">    ListNode *p = pre-&gt;next;</div><div class="line">    <span class="keyword">if</span>(pre-&gt;val == h-&gt;val &amp;&amp; pre-&gt;val != p-&gt;val)</div><div class="line">        <span class="built_in">return</span> this-&gt;deleteDuplicates(p);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(p)&#123;</div><div class="line">        <span class="keyword">while</span>(p &amp;&amp; pre-&gt;val == p-&gt;val)&#123;  // 寻找第一个不同的数</div><div class="line">            p = p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(pre-&gt;next != p)&#123;// 若与pre不同的数不是pre-&gt;next，表示中间有重复数，需删除</div><div class="line">            h-&gt;next = p;</div><div class="line">            pre = p;</div><div class="line">            <span class="keyword">if</span>(p!=NULL)</div><div class="line">                p = p-&gt;next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            h = pre;</div><div class="line">            pre = p;</div><div class="line">            <span class="keyword">if</span>(p!=NULL)</div><div class="line">                p = p-&gt;next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> head;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 刷题记录(中等篇) NO.495 提莫攻击]]></title>
      <url>http://www.cmeng.cc/2018/09/21/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%B8%AD%E7%AD%89%E7%AF%87)495-%E6%8F%90%E8%8E%AB%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>在《英雄联盟》的世界中，有一个叫“提莫”的英雄，他的攻击可以让敌方英雄艾希（编者注：寒冰射手）进入中毒状态。现在，给出提莫对艾希的攻击时间序列和提莫攻击的中毒持续时间，你需要输出艾希的中毒状态总时长。<br>你可以认为提莫在给定的时间点进行攻击，并立即使艾希处于中毒状态。<br><a id="more"></a><br><strong>说明：</strong></p>
<ul>
<li>你可以假定时间序列数组的总长度不超过10000。</li>
<li>你可以假定提莫攻击时间序列中的数字和提莫攻击的中毒持续时间都是非负整数，并且不超过10,000,000。<br><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvhbe0gnjcj30ny04b0sn" alt="示例1"><br><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvhbehqsb9j30nw04raa0" alt="示例2"><br><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvhbesj16zj308u03yjrm" alt="提莫队长，正在送命"></li>
</ul>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>由题目已知给出的时间序列是有序的，省了很多事。<br>本题只需要判断两次攻击的时间间隔与中毒时长的大小即可<br><strong>伪代码</strong></p>
<pre><code>1、 若数组为空(leetcode常见操作)，即没有攻击，返回0
2、 从第二个元素开始遍历数组，比较两次攻击时间差与中毒时长的大小，取其中较小的数
3、 加上最后一次攻击的中毒时长
</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># with Python</span></div><div class="line">def findPoisonedDuration(self, timeSeries, duration):</div><div class="line">    <span class="string">""</span><span class="string">"</span></div><div class="line">    :type timeSeries: List[int]</div><div class="line">    :type duration: int</div><div class="line">    :rtype: int</div><div class="line">    "<span class="string">""</span></div><div class="line">    <span class="keyword">if</span> len(timeSeries) == 0:</div><div class="line">        <span class="built_in">return</span> 0</div><div class="line">    </div><div class="line">    <span class="comment"># 初始值为最后一次攻击的持续时间</span></div><div class="line">    SUM = duration</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(1,len(timeSeries)):</div><div class="line">        <span class="keyword">if</span> timeSeries[x] - timeSeries[x-1] &gt; duration:</div><div class="line">            SUM += duration</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            SUM += (timeSeries[x] - timeSeries[x-1])</div><div class="line">    </div><div class="line">    <span class="built_in">return</span> SUM</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 刷题记录(简单篇) NO.263 丑数]]></title>
      <url>http://www.cmeng.cc/2018/09/21/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E7%AE%80%E5%8D%95%E7%AF%87)263-%E4%B8%91%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>编写一个程序判断给定的数是否为丑数。<br>丑数就是只包含质因数 2, 3, 5 的正整数。</p>
<p><strong>说明：</strong></p>
<ul>
<li>1 是丑数。</li>
<li>输入不会超过 32 位有符号整数的范围: [−2^31,  2^31 − 1]</li>
</ul>
<a id="more"></a>
<p><img src="http://ww1.sinaimg.cn/large/0065ewYjly1fvhi4zcuq4j30nz0a4q2y" alt="示例"></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>依次除以 5，3，2，直到取模不为0，若最后结果为1 ，返回true,否则不是</p>
<p><strong>代码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">def isUgly(self, num):</div><div class="line">        <span class="keyword">if</span> num &lt;= 0 :</div><div class="line">            <span class="built_in">return</span> False</div><div class="line">        <span class="keyword">if</span> num == 1:</div><div class="line">            <span class="built_in">return</span> True</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">while</span> num % 5 == 0 and num &gt;= 5:</div><div class="line">            num /= 5</div><div class="line">            </div><div class="line">        <span class="keyword">while</span> num % 3 == 0 and num &gt;= 3:</div><div class="line">            num /= 3</div><div class="line">            </div><div class="line">        <span class="keyword">while</span> num % 2 == 0 and num &gt;= 2:</div><div class="line">            num /= 2</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> num == 1</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 刷题记录(困难篇) NO.906 超级回文数]]></title>
      <url>http://www.cmeng.cc/2018/09/20/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E5%9B%B0%E9%9A%BE%E7%AF%87)906-%E8%B6%85%E7%BA%A7%E5%9B%9E%E6%96%87%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>如果一个正整数自身是回文数，而且它也是一个回文数的平方，那么我们称这个数为超级回文数。<br>现在，给定两个正整数 L 和 R （以字符串形式表示），返回包含在范围 [L, R] 中的超级回文数的数目。</p>
<a id="more"></a>
<p><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvhdjkdo1yj30nw049gli" alt="示例"><br><strong>注意：</strong></p>
<ul>
<li>1 &lt;= len(L) &lt;= 18</li>
<li>1 &lt;= len(R) &lt;= 18</li>
<li>L 和 R 是表示 [1, 10^18) 范围的整数的字符串。</li>
<li>int(L) &lt;= int(R)</li>
</ul>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>考虑到数值的范围很大，暴力求解不可取，因此需要缩小范围。<br>从两数的平方根之间判断：找出其中的回文数，判断其平方是否也是回文数即可。<br>但是即便如此，需要判定的数字最高也有9位之多，暂时不知如何继续缩减。。。<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fv826uacktj300s00sq2s" alt="小纠结"><br>大方向做不了更多只能在小细节（判读回文数）上优化一点（参见<a href="./leetcode 刷题记录（简单篇）：NO.9 回文数">leetcode 刷题记录（简单篇）：NO.9 回文数</a>）。</p>
<p><strong>代码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># with Python</span></div><div class="line"></div><div class="line">import math</div><div class="line">def superpalindromesInRange(L, R):</div><div class="line">    <span class="string">""</span><span class="string">"</span></div><div class="line">    :type L: str</div><div class="line">    :type R: str</div><div class="line">    :rtype: int</div><div class="line">    "<span class="string">""</span></div><div class="line"></div><div class="line">    nl,nr = long(math.sqrt(long(L))),long(math.sqrt(long(R)))</div><div class="line">    </div><div class="line">    count = 0</div><div class="line">    <span class="comment"># 筛选出 [nl,nr]之间的所有回文数 </span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> filter(palindrom, range(nl,nr+1)):</div><div class="line">        <span class="keyword">if</span> palindrom(x * x):</div><div class="line">            count += 1</div><div class="line">    <span class="built_in">return</span> count</div><div class="line"></div><div class="line"><span class="comment"># 判断是否事回文数</span></div><div class="line">def palindrom(s):</div><div class="line">    <span class="keyword">if</span> s % 10 == 0:</div><div class="line">        <span class="built_in">return</span> False</div><div class="line">    k = 0</div><div class="line">    <span class="keyword">while</span> k &lt; s:</div><div class="line">        k = k * 10+ s % 10</div><div class="line">        <span class="keyword">if</span> s == k or s/10 == k:</div><div class="line">            <span class="built_in">return</span> True</div><div class="line">        s /= 10</div><div class="line">    <span class="built_in">return</span> False</div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong>这并不是很好的办法,事实上这也是暴力求解。上述代码为了跑出所有开方数花了15分钟左右（与python本身执行效率也有关系）。<br>很明显这种耗时在leetcode上是过不了的，但知道所有满足情况的数之后就很容易用个取巧的办法解决：判断列表中有多少数在给定的范围中。</p>
<p><strong>代码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># with Python</span></div><div class="line"></div><div class="line">ls =[1,2,3,11,22,101,111,121,202,212,1001,1111,2002,10001,10101,10201,11011,11111,11211,20002,20102,100001,101101,110011,111111,200002,1000001,1001001,1002001,1010101,1011101,1012101,1100011,1101011,1102011,1110111,1111111,2000002,2001002,10000001,10011001,10100101,10111101,11000011,11011011,11100111,11111111,20000002,100000001,100010001,100020001,100101001,100111001,100121001,101000101,101010101,101020101,101101101,101111101,110000011,110010011,110020011,110101011,110111011,111000111,111010111,111101111, 111111111,200000002,200010002]</div><div class="line"></div><div class="line">nl,nr = long(math.sqrt(long(L))),long(math.sqrt(long(R)))</div><div class="line"></div><div class="line">count = 0</div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(len(ls)):</div><div class="line">    <span class="keyword">if</span> ls[x] &gt;= nl and ls[x] &lt;= nr:</div><div class="line">        count += 1</div><div class="line"><span class="built_in">return</span> count</div></pre></td></tr></table></figure></p>
<p><img src="http://ww3.sinaimg.cn/large/0065ewYjgw1f9t6gul26fj301s01s0si.jpg" alt="羞耻的眼泪"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 刷题记录(中等篇)：NO.456 132模式]]></title>
      <url>http://www.cmeng.cc/2018/09/20/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%B8%AD%E7%AD%89%E7%AF%87)456-132%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>给定一个整数序列：a1, a2, …, an，一个132模式的子序列 ai, aj, ak 被定义为：当 i &lt; j &lt; k 时，ai &lt; ak &lt; aj。设计一个算法，当给定有 n 个数字的序列时，验证这个序列中是否含有132模式的子序列。</p>
<p><strong>注意：</strong> n 的值小于15000。<br><a id="more"></a></p>
<p><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvhfeicq33j30o10d8jri" alt="示例"></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用栈可以高效快速的解决该问题。需要维护一个栈和一个变量 right 。栈中保存所有比 right 大的值，即 “132” 中的 “3”,right表示 “2”,只需要再找到比right小的 “1”，即可返回true。<br>需要从后向前遍历。<br>当遇到比栈顶元素大的元素时，循环弹出比该元素小的所有栈顶元素，将弹出的元素赋值给 right, 这时 right 相比之前变的更大，更容易找到 “1”。</p>
<p><strong>伪代码</strong></p>
<pre><code>1、 判断数组长度，小于3 直接返回 false (leetcode测试用例的老一套)
2、 定义栈和 right = INT_MIN（初始 right 为最小值） 
3、 从后向前遍历数组：
    3.1、 若当前元素比 right 小 ==&gt; &quot;1&quot;,返回true
    3.2、 否则弹出所有比当前元素小的顶元素，并将弹出的元素赋值给 right 
    3.3、 将当前元素入栈
4、 循环结束，表示不含 &quot;132&quot; 模式的子序列，返回false
</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// with C++</div><div class="line"> bool find132pattern(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int size = nums.size();</div><div class="line">        <span class="keyword">if</span> (size &lt; 3)</div><div class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">        </div><div class="line">        stack&lt;int&gt; s;</div><div class="line">        int right = INT_MIN;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(int i = size-1; i &gt;= 0; --i)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]&lt;right)</div><div class="line">                <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">            // 保证栈中的元素都是大于 <span class="string">"2"</span> 的 “3”</div><div class="line">            <span class="keyword">while</span>(!s.empty() &amp;&amp; nums[i] &gt; s.top())&#123;</div><div class="line">                right = s.pop();</div><div class="line">            &#125;</div><div class="line">            s.push(nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>参考文档：<br><a href="https://leetcode.com/problems/132-pattern/discuss/94071/single-pass-c-on-space-and-time-solution-8-lines-with-detailed-explanation" target="_blank" rel="external">https://leetcode.com/problems/132-pattern/discuss/94071/single-pass-c-on-space-and-time-solution-8-lines-with-detailed-explanation</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 刷题记录(简单篇) NO.561 数组拆分I]]></title>
      <url>http://www.cmeng.cc/2018/09/19/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E7%AE%80%E5%8D%95%E7%AF%87)561-%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86I/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。<br><a id="more"></a><br><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvhemjyr90j30o603uwec" alt="示例"><br><strong>说明：</strong></p>
<ul>
<li>n 是正整数,范围在 [1, 10000].</li>
<li>数组中的元素范围在 [-10000, 10000].</li>
</ul>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>既然是找所有小数的最大和，就要保证每个次大的数不能被浪费。<br>即最大值与次大的值一组，第三大与第四大一组。。。最小值与次小值一组<br>所以需要先排序,偶数位元素总和即为答案。</p>
<p><strong>代码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#with Python</span></div><div class="line">class Solution(object):</div><div class="line">    def arrayPairSum(self, nums):</div><div class="line">        <span class="string">""</span><span class="string">"</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: int</div><div class="line">        "<span class="string">""</span></div><div class="line">        nums = sorted(nums)</div><div class="line">        SUM = 0</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(0,len(nums),2):</div><div class="line">            SUM += nums[x]</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> SUM</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 刷题记录(简单篇) NO.575 分糖果]]></title>
      <url>http://www.cmeng.cc/2018/09/19/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E7%AE%80%E5%8D%95%E7%AF%87)575-%E5%88%86%E7%B3%96%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>给定一个偶数长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。你需要把这些糖果平均分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。<br>弟弟表示这个分发……没毛病<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fv82dt127ij300s00smx0" alt="笑哭"><br><a id="more"></a><br><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fvhewog1g8j30o5072wej" alt="示例"><br><strong>说明：</strong></p>
<ul>
<li>数组的长度为[2, 10,000]，并且确定为偶数。</li>
<li>数组中数字的大小在范围[-100,000, 100,000]内。</li>
</ul>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>排序 -&gt; 把所有糖果挑一份给妹妹 -&gt; 直到够一半或所有种类都挑完</p>
<p><strong>代码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def distributeCandies(self, candies):</div><div class="line">       <span class="string">""</span><span class="string">"</span></div><div class="line">       :type candies: List[int]</div><div class="line">       :rtype: int</div><div class="line">       "<span class="string">""</span></div><div class="line">       ls = sorted(candies)</div><div class="line">       </div><div class="line">       count,size = 1,len(ls)/2</div><div class="line">       </div><div class="line">       <span class="keyword">for</span> x <span class="keyword">in</span> range(1,len(ls)):</div><div class="line">           <span class="keyword">if</span> count == size:</div><div class="line">               <span class="built_in">return</span> count</div><div class="line">           <span class="keyword">if</span> ls[x] != ls[x-1]:</div><div class="line">               count += 1</div><div class="line">       <span class="built_in">return</span> count</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://www.cmeng.cc/2018/09/18/index.md/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode刷题记录(中等篇) NO.05 最长回文子串]]></title>
      <url>http://www.cmeng.cc/2018/09/18/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%B8%AD%E7%AD%89%E7%AF%87)05-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。<br><a id="more"></a><br><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fviprz1fisj30ob069a9w.jpg" alt="示例"></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>考虑到回文子串的形式只有两种： <strong>..X..</strong>  以及  <strong>..XX..</strong><br>因此可以尝试从一个或两个坐标点开始向两边开始寻找，通过判断两边是否相同可以得出是否是回文数。</p>
<p><strong>代码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//  以n1,n2为起点，向两边寻找回文字符串</div><div class="line">    string compare(string s,int n1,int n2)&#123;</div><div class="line">        int to_left = n1,to_right = n2 ,len = s.size();</div><div class="line">//         直到找不到回文字符或到头结束循环</div><div class="line">        <span class="keyword">while</span>(to_left &gt;= 0 &amp;&amp; to_right &lt; len &amp;&amp; s[to_left] == s[to_right])&#123;</div><div class="line">            to_left--;</div><div class="line">            to_right++;</div><div class="line">        &#125;</div><div class="line">        // 返回回文部分</div><div class="line">        <span class="built_in">return</span> s.substr(to_left+1,to_right-to_left-1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    string longestPalindrome(string s) &#123;</div><div class="line">        int len = s.size();</div><div class="line">        <span class="keyword">if</span>(len == 0)</div><div class="line">            <span class="built_in">return</span> <span class="string">""</span>;</div><div class="line">        string longest=s.substr(0,1),p;</div><div class="line">        <span class="keyword">for</span>(int i = 0;i&lt;len-1;i++)&#123;</div><div class="line">        	// 。。X。。 形式的回文子串</div><div class="line">            p = this-&gt;compare(s,i,i);</div><div class="line">            <span class="keyword">if</span>(p.size() &gt; longest.size())</div><div class="line">                longest = p;</div><div class="line">			// 。。XX。。 形式的回文子串</div><div class="line">            p = this-&gt;compare(s,i,i+1);</div><div class="line">            <span class="keyword">if</span>(p.size()&gt;longest.size())</div><div class="line">                longest = p;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">return</span> longest;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[leetcode 刷题记录(简单篇) NO.9 回文数]]></title>
      <url>http://www.cmeng.cc/2018/09/13/index.md/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E7%AE%80%E5%8D%95%E7%AF%87)09%20%E5%9B%9E%E6%96%87%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数（负数的符号也计入在内 ==&gt; 负数是非回文数）。<br>[<strong>进阶</strong>]：<strong> 不要使用将整数转换为字符串的方式解决问题</strong><br><a id="more"></a></p>
<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">__输入:__ 121 ==&gt;  <span class="literal">true</span></div><div class="line">__输入:__ -121 ==&gt;  <span class="literal">false</span></div><div class="line">__输入:__ 10 ==&gt;  <span class="literal">false</span></div></pre></td></tr></table></figure>
<p><strong> 思路1：暴力法 </strong><br>最常用的解题办法：将数x不断取余和取模倒序为另一个数，然后两相比较。<br>、、、bash<br>int n=x,m=0;<br>while(n){<br>    m = m*10 + x%10;<br>    x /= 10;<br>}<br>、、、<br>这种解法最主要的就是注意不能让反转后的数字越界，比如 4个字节的int取值范围是<strong>-2147483648 ~ 2147483647</strong>,<strong>x=1123456789</strong>是可行的，但反转出的<strong>9876543211</strong>就超出了int的范围，会变成另一个值。<br>可是就题目来看，如果是回文数，反转了也不会出现超出范围的情况；如果不是，就算超了也不会让他们相等的情况，这么一想，正中下怀<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fv829kuvcnj300s00sjr5" alt=""><br><strong>然而</strong><br><a href="https://leetcode-cn.com" target="_blank" rel="external">leetcode</a><br>事实证明 “暴力模不可取”,测试用例中包含超出int范围的数，然后就会报错<img src="http://ww3.sinaimg.cn/large/0065ewYjgw1f9t6gul26fj301s01s0si.jpg" alt="雷姆"></p>
<p><strong> 思路2：转换法 </strong><br>把整数转换为字符串,通过一头一尾两个指针向中间挤，如果指针相遇前出现两指针值不同的情况，即为非回文数，否则就是回文数。<br>然而题目要求不要用。。。弃之。</p>
<p><strong> 思路3：截半法（名字我瞎取的<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fdy9npr95ig300o00o741.gif" alt="斜眼笑">）</strong><br>这种办法类似于暴力法,区别在于是取后半段反转与前半段比较。那么重点在于如何判断已经取到中间。<br>最简单的办法是判断两数之间的大小：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原数：m, 新数：n。 若：</div><div class="line">m &gt; n:表示还需要继续取余；</div><div class="line">m == n:返回 <span class="literal">true</span></div><div class="line">m &lt; n:返回 <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>然而这种做法对形如 121 的奇数位数无效：<br>    m=121,n=0 ==&gt; m=12,n=1 ==&gt; m=1,n=12 ==&gt; false ==&gt; GG <img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fv826uacktj300s00sq2s" alt="小纠结"><br>所以还需要在取余之前判断一下 m 与 n</p>
<p><strong>最终代码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">bool isPalindrome(int m) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(m &lt; 0 || m%10 == 0) <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">    int n = 0;</div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        n = n * 10 + m % 9;</div><div class="line">        <span class="keyword">if</span>(m == n)</div><div class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">        m /= 10;</div><div class="line">    &#125;<span class="keyword">while</span>(m &gt; n);</div><div class="line"></div><div class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[禁止apache显示目录索引]]></title>
      <url>http://www.cmeng.cc/2017/04/01/index.md/appache-forbide-file-dir/</url>
      <content type="html"><![CDATA[<h2 id="禁止apache显示目录索引"><a href="#禁止apache显示目录索引" class="headerlink" title="禁止apache显示目录索引"></a>禁止apache显示目录索引</h2><p>服务器上部署项目之后会显示文件索引，这很烦，也让网站很不安全，所以找办法禁止显示。下面是找到的禁止Apache显示目录索引的常见的2种方法。<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fdy9npr95ig300o00o741.gif" alt="斜眼笑"><br><a id="more"></a></p>
<h4 id="方法一：修改目录配置"><a href="#方法一：修改目录配置" class="headerlink" title="方法一：修改目录配置"></a>方法一：修改目录配置</h4><p><strong> 注：Apache修改httpd.conf，Apache2修改apache2.conf </strong></p>
<ol>
<li>初始配置文件如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Directory /var/www&gt;</div><div class="line">    Options Indexes FollowSymLinks </div><div class="line">    <span class="comment"># 修改为： Options FollowSymLinks</span></div><div class="line">    AllowOverride None</div><div class="line">    Order allow,deny</div><div class="line">    Allow from all</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>注：Indexes 的作用就是当该目录下没有 index.html 文件时，就显示目录结构,去掉 Indexes, Apache 就不会显示该目录的列表了。</p>
<h4 id="方法二：-通过-htaccess文件"><a href="#方法二：-通过-htaccess文件" class="headerlink" title="方法二： 通过.htaccess文件"></a>方法二： 通过.htaccess文件</h4><p>可以在根目录新建或修改 .htaccess 文件中添加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Files *&gt;</div><div class="line"> Options -Indexes</div><div class="line">&lt;/Files&gt;</div></pre></td></tr></table></figure></p>
<p>就可以禁止Apache显示目录索引。</p>
<p><strong> 保存修改文件，重启服务器 </strong><br>不会重启apache？狠狠点这里 <a href="https://meng950813.github.io/2017/04/01/linux-apache/#more" target="_blank" rel="external">linux配置apache</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux 下的 mysql 命令行操作]]></title>
      <url>http://www.cmeng.cc/2017/04/01/index.md/Linux-MySql/</url>
      <content type="html"><![CDATA[<h2 id="linux-下的-mysql-命令行操作"><a href="#linux-下的-mysql-命令行操作" class="headerlink" title="linux 下的 mysql 命令行操作"></a>linux 下的 mysql 命令行操作</h2><p>突然发现又忘了服务器上的数据库怎么用的了。。。<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fe762j63jij300s00smx0.jpg" alt="苦笑"><br>所以决定写这篇博客记录一下linux下的常用的mysql数据库命令。防忘标签<img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fe76435sfrj300s00sjr5.jpg" alt="滑稽"><br>注：所有命令基于ubuntu系统<br><a id="more"></a></p>
<h2 id="linux下安装mysql"><a href="#linux下安装mysql" class="headerlink" title="linux下安装mysql"></a>linux下安装mysql</h2><p><strong> 更新本地软件库的索引 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure></p>
<p><strong> 安装数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-server</div></pre></td></tr></table></figure></p>
<p><strong> 安装客户端 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install mysql-client</div><div class="line">sudo apt-get install libmysqlclient-dev</div></pre></td></tr></table></figure></p>
<p><strong> 判断是否安装成功 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(sudo) netstat -tap|grep mysql</div></pre></td></tr></table></figure></p>
<p>出现这个就是成功：<br><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fe76ry44inj30jx01wa9y.jpg" alt="检查mysql是否安装成功"></p>
<h2 id="简单配置mysql"><a href="#简单配置mysql" class="headerlink" title="简单配置mysql"></a>简单配置mysql</h2><p><strong> 设置数据库编码 </strong><br>打开配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/mysql/my.cof</div></pre></td></tr></table></figure></p>
<p>修改如下位置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[client]</div><div class="line">port            = 3306</div><div class="line">socket          = /var/run/mysqld/mysqld.sock</div><div class="line"><span class="comment">#增加客户端的字符编码</span></div><div class="line">default-character-set=utf8</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"><span class="comment">#增加服务器端的字符编码</span></div><div class="line">character-set-server=utf8</div><div class="line">collation-server=utf8_general_ci</div></pre></td></tr></table></figure>
<p>让服务器可以远程访问，还是配置文件my.cnf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#注释bind-address</span></div><div class="line"><span class="comment">#bind-address        = 127.0.0.1</span></div></pre></td></tr></table></figure></p>
<h2 id="mysql-常用命令"><a href="#mysql-常用命令" class="headerlink" title="mysql 常用命令"></a>mysql 常用命令</h2><p><strong> 启动mysql </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysql start</div></pre></td></tr></table></figure></p>
<p><strong> 停止mysql </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysql stop</div></pre></td></tr></table></figure></p>
<p><strong> 登录 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//-u后面跟用户名，回车之后输入密码即可</div><div class="line">mysql -u root -p</div></pre></td></tr></table></figure></p>
<p><strong> 查看数据库字符集 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show variables like <span class="string">'character%'</span>;</div></pre></td></tr></table></figure></p>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p><strong> 创建数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database &lt;数据库名&gt;;</div></pre></td></tr></table></figure></p>
<p><strong> 显示所有数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show databases;</div></pre></td></tr></table></figure></p>
<p><strong> 进入/切换数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use &lt;数据库名&gt;;</div></pre></td></tr></table></figure></p>
<p><strong> 删除数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop database &lt;数据库名&gt;;</div></pre></td></tr></table></figure></p>
<p><strong> 查看当前使用数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select database();</div></pre></td></tr></table></figure></p>
<h2 id="数据库导入与导出-备份与恢复"><a href="#数据库导入与导出-备份与恢复" class="headerlink" title="数据库导入与导出(备份与恢复)"></a>数据库导入与导出(备份与恢复)</h2><p><strong> 导入数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p 数据库名&lt;数据库文件; //导入时数据库必须存在，可以为空数据库</div></pre></td></tr></table></figure></p>
<p><strong> 导出数据库 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump -u root -p --opt 数据库名&gt;备份名; //进入到库目录</div></pre></td></tr></table></figure></p>
<p><strong> 数据库授权 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grant select,... on 数据库.*  to  用户名@登录主机 identified by <span class="string">"密码"</span>;</div></pre></td></tr></table></figure></p>
<p>例-1：增加一个用户user001密码为123456，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grant select,insert,update,delete on *.* to user001@<span class="string">"%"</span> Identified by <span class="string">"123456"</span>;</div></pre></td></tr></table></figure></p>
<p>例-2:增加一个用户user002密码为123456,让此用户只可以在localhost上登录,也可以设置指定IP，并可以对数据库test进行查询、插入、修改、删除的操作 (localhost 指本地主机,即MySQL数据库所在的那台主机)<br>//这样用户即使用知道user_2的密码，他也无法从网上直接访问数据库，只能通过MYSQL主机来操作test库。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grant select,insert,update,delete on test.* to user002@localhost identified by <span class="string">"123456"</span>;</div></pre></td></tr></table></figure></p>
<h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><p><strong> 显示所有表 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show tables;</div></pre></td></tr></table></figure></p>
<p><strong> 显示表结构 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">describe &lt;表名&gt;;</div></pre></td></tr></table></figure></p>
<p><strong> 建表 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">create table &lt;表名&gt;(字段属性);</div><div class="line">例：</div><div class="line">create table name(</div><div class="line">        id int auto_increment not null primary key ,</div><div class="line">        uname char(8)</div><div class="line">    );</div><div class="line">注： auto_increment 自增</div><div class="line">     primary key    主键</div><div class="line">     foreign key(字段名) references(表名.字段名) 外键</div></pre></td></tr></table></figure></p>
<p><strong> 删表 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop table &lt;表名&gt;;</div></pre></td></tr></table></figure></p>
<h2 id="记录操作（增删改查）"><a href="#记录操作（增删改查）" class="headerlink" title="记录操作（增删改查）"></a>记录操作（增删改查）</h2><p><strong> 增加记录 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insert into &lt;表名&gt;(字段名,...) values(字段值,...);</div></pre></td></tr></table></figure></p>
<p><strong> 删除记录 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delete from &lt;表名&gt; <span class="built_in">where</span> xxxx;</div></pre></td></tr></table></figure></p>
<p><strong> 修改记录 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update &lt;表名&gt; <span class="built_in">set</span> 字段名=<span class="string">"新值"</span> <span class="built_in">where</span> xxxx;</div></pre></td></tr></table></figure></p>
<p><strong> 查询记录 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select xxx from &lt;表名，...&gt;  <span class="built_in">where</span> xxxx;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网页上传日志]]></title>
      <url>http://www.cmeng.cc/2017/03/21/index.md/uploadDiary/</url>
      <content type="html"><![CDATA[<h2 id="网页上传日志"><a href="#网页上传日志" class="headerlink" title="网页上传日志"></a>网页上传日志</h2><p>本次上传内容主要是各种特效，主要是canvas特效和css特效。<br>不久之前，楼主发现了一个有意思的网站，主要是关于各种网页特效等，<a href="https://tympanus.net/codrops/" target="_blank" rel="external"><strong>原网站传送门</strong></a>。<br>本文主要列举其中几个css的特效，为了防止忘记原网址也为了美化一下服务器，就自（臭）告（不）奋（要）勇（脸）的下载并修改了几个原始网页，上传到我的服务器。。。<br><img src="http://ww1.sinaimg.cn/large/0065ewYjgy1fdy9npr95ig300o00o741.gif" alt="斜眼笑"><br><a id="more"></a></p>
<h2 id="css特效"><a href="#css特效" class="headerlink" title="css特效"></a>css特效</h2><h4 id="元素hover特效"><a href="#元素hover特效" class="headerlink" title="元素hover特效"></a>元素hover特效</h4><ol>
<li><a href="http://115.159.92.11/specialEffects/css/CreativeLinkEffects/" target="_blank" rel="external"><strong>Creative Link Effects</strong></a></li>
<li><a href="http://115.159.92.11/specialEffects/css/CreativeButtons/" target="_blank" rel="external"><strong>Creative Button Styles</strong></a></li>
<li><a href="http://115.159.92.11/specialEffects/css/IconHoverEffects" target="_blank" rel="external"><strong>Icon Hover Effects</strong></a></li>
<li><a href="https://tympanus.net/Development/AnimatedSVGIcons/" target="_blank" rel="external"><strong>Animated SVG Icons</strong></a></li>
</ol>
<h4 id="元素点击特效"><a href="#元素点击特效" class="headerlink" title="元素点击特效"></a>元素点击特效</h4><p><a href="https://tympanus.net/Development/ProgressButtonStyles/" target="_blank" rel="external"><strong>Progress Button Styles</strong></a></p>
<h2 id="js实现特效"><a href="#js实现特效" class="headerlink" title="js实现特效"></a>js实现特效</h2><ol>
<li><a href="http://115.159.92.11/specialEffects/js/tagCloud-3D/" target="_blank" rel="external"><strong>球状标签云</strong></a></li>
</ol>
<h2 id="canvas特效"><a href="#canvas特效" class="headerlink" title="canvas特效"></a>canvas特效</h2><ol>
<li><a href="http://115.159.92.11/specialEffects/canvas/fireworks/" target="_blank" rel="external"><strong>烟花特效</strong></a></li>
<li><a href="http://115.159.92.11/specialEffects/canvas/zhihuLogin/" target="_blank" rel="external"><strong>知乎登陆背景</strong></a></li>
<li><a href="http://115.159.92.11/specialEffects/canvas/timer" target="_blank" rel="external"><strong>canva绘制时钟</strong></a> </li>
</ol>
<h2 id="一些炫酷的网站链接"><a href="#一些炫酷的网站链接" class="headerlink" title="一些炫酷的网站链接"></a>一些炫酷的网站链接</h2><p><a href="http://blacknegative.com" target="_blank" rel="external"><strong>blacknegative</strong></a><br><a href="http://www.georgeandjonathan.com/" target="_blank" rel="external"><strong>George &amp; Jonathan III</strong></a><br><a href="http://www.3gcs.com/" target="_blank" rel="external"><strong>另一种烟花特效</strong></a><br><a href="http://www.hugoware.net" target="_blank" rel="external"><strong>hugoware</strong></a></p>
<h4 id="3d特效网站"><a href="#3d特效网站" class="headerlink" title="3d特效网站"></a>3d特效网站</h4><p><a href="https://threejs.org/" target="_blank" rel="external"><strong>three.js</strong></a><br><a href="http://i-remember.fr/en/" target="_blank" rel="external"><strong>I Remember</strong></a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[模块化与WebPack学习教程]]></title>
      <url>http://www.cmeng.cc/2017/02/25/index.md/webpack_jiao_cheng/</url>
      <content type="html"><![CDATA[<h2 id="模块化与WebPack学习教程"><a href="#模块化与WebPack学习教程" class="headerlink" title="模块化与WebPack学习教程"></a>模块化与WebPack学习教程</h2><p>本文主要介绍模块化以及打包工具WebPack的使用。<br>关于webpack使用部分转载自<a href="http://www.jianshu.com/p/b95bbcfc590d" target="_blank" rel="external">简书-WebPack简明学习教程 by hutou</a><br><a id="more"></a></p>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul>
<li>模块就是实现特定功能的文件。</li>
<li>模块化是一种处理复杂系统分解成为更好的可管理模块的方式，把系统代码划分为一系列职责单一，高度解耦且可替换的模块，提高系统的可维护性。</li>
</ul>
<h2 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h2><blockquote>
<ol>
<li>一个打包工具</li>
<li>一个模块加载工具</li>
<li>各种资源都可以当成模块来处理</li>
<li>网站 <a href="http://webpack.github.io/" target="_blank" rel="external">http://webpack.github.io/</a></li>
</ol>
</blockquote>
<p>如今，越来越多的JavaScript代码被使用在页面上，我们添加很多的内容在浏览器里。如何去很好的组织这些代码，成为了一个必须要解决的难题。</p>
<p>对于模块的组织，通常有如下几种方法：</p>
<ol>
<li>通过书写在不同文件中，使用script标签进行加载</li>
<li>CommonJS进行加载（NodeJS就使用这种方式）</li>
<li>AMD进行加载（require.js使用这种方式）</li>
<li>ES6模块</li>
</ol>
<p><strong>思考：为什么只有JS需要被模块化管理，前台的很多预编译内容，不需要管理吗？</strong></p>
<p>基于以上的思考，WebPack项目有如下几个目标：</p>
<ul>
<li>将依赖树拆分，保证按需加载</li>
<li>保证初始加载的速度</li>
<li>所有静态资源可以被模块化</li>
<li>可以整合第三方的库和模块</li>
<li>可以构造大系统</li>
</ul>
<p>从下图可以比较清晰的看出WebPack的功能<br><img src="http://upload-images.jianshu.io/upload_images/401663-3b68765ce208588f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="webpack功能"></p>
<p><strong>WebPack的特点</strong></p>
<ul>
<li>丰富的插件，方便进行开发工作</li>
<li>大量的加载器，包括加载各种静态资源</li>
<li>代码分割，提供按需加载的能力</li>
<li>发布工具</li>
</ul>
<p><strong>WebPack的优势</strong></p>
<blockquote>
<ul>
<li>webpack 是以 commonJS 的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。</li>
<li>能被模块化的不仅仅是 JS 了。</li>
<li>开发便捷，能替代部分 grunt/gulp 的工作，比如打包、压缩混淆、图片转base64等。</li>
<li>扩展性强，插件机制完善，特别是支持 React 热插拔（见 react-hot-loader ）的功能让人眼前一亮。</li>
</ul>
</blockquote>
<h2 id="WebPack的安装"><a href="#WebPack的安装" class="headerlink" title="WebPack的安装"></a>WebPack的安装</h2><ol>
<li><p>安装命令</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install webpack -g</div></pre></td></tr></table></figure>
</li>
<li><p>使用webpack</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm init <span class="comment">#会自动生产一个 package.json文件</span></div><div class="line">$ npm install webpack --save-dev <span class="comment">#将webpack增加到package.json 文件中</span></div></pre></td></tr></table></figure>
</li>
<li><p>可以使用不同的版本</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install webpack@<span class="number">1.2</span>.x --save-dev</div></pre></td></tr></table></figure>
</li>
<li><p>如果想安装开发工具</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install webpack-dev-server --save-dev</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="WebPack的配置"><a href="#WebPack的配置" class="headerlink" title="WebPack的配置"></a>WebPack的配置</h2><blockquote>
<p>每个项目下都必须配置有一个 webpack.config.js ，它的作用如同常规的 gulpfile.js/Gruntfile.js ，就是一个配置项，告诉 webpack 它需要做什么。</p>
</blockquote>
<p>下面是一个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var webpack = require(<span class="string">'webpack'</span>);</div><div class="line">var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">    //插件项</div><div class="line">    plugins: [commonsPlugin],</div><div class="line">    //页面入口文件配置</div><div class="line">    entry: &#123;</div><div class="line">        index : <span class="string">'./src/js/page/index.js'</span></div><div class="line">    &#125;,</div><div class="line">    //入口文件输出配置</div><div class="line">    output: &#123;</div><div class="line">        path: <span class="string">'dist/js/page'</span>,</div><div class="line">        filename: <span class="string">'[name].js'</span></div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        //加载器配置</div><div class="line">        loaders: [</div><div class="line">            &#123; <span class="built_in">test</span>: /\.css$/, loader: <span class="string">'style-loader!css-loader'</span> &#125;,</div><div class="line">            &#123; <span class="built_in">test</span>: /\.js$/, loader: <span class="string">'jsx-loader?harmony'</span> &#125;,</div><div class="line">            &#123; <span class="built_in">test</span>: /\.scss$/, loader: <span class="string">'style!css!sass?sourceMap'</span>&#125;,</div><div class="line">            &#123; <span class="built_in">test</span>: /\.(png|jpg)$/, loader: <span class="string">'url-loader?limit=8192'</span>&#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    //其它解决方案配置</div><div class="line">    resolve: &#123;</div><div class="line">        root: <span class="string">'E:/github/flux-example/src'</span>, //绝对路径</div><div class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>],</div><div class="line">        <span class="built_in">alias</span>: &#123;</div><div class="line">            AppStore : <span class="string">'js/stores/AppStores.js'</span>,</div><div class="line">            ActionType : <span class="string">'js/actions/ActionType.js'</span>,</div><div class="line">            AppAction : <span class="string">'js/actions/AppAction.js'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<ol>
<li>plugins 是插件项，这里我们使用了一个 CommonsChunkPlugin的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用。</li>
<li>entry 是页面入口文件配置，output 是对应输出项配置 （即入口文件最终要生成什么名字的文件、存放到哪里）</li>
<li>module.loaders 是最关键的一块配置。它告知 webpack 每一种文件都需要使用什么加载器来处理。 所有加载器需要使用npm来加载</li>
<li>最后是 resolve 配置，配置查找模块的路径和扩展名和别名（方便书写）</li>
</ol>
<h2 id="WebPack开始使用"><a href="#WebPack开始使用" class="headerlink" title="WebPack开始使用"></a>WebPack开始使用</h2><ol>
<li>正确安装了WebPack，方法可以参考上面</li>
<li><p>书写entry.js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(<span class="string">"看看如何让它工作！"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>书写index.html文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"bundle.js"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>执行命令，生成bundle.js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack ./entry.js bundle.js</div></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中打开index.html文件，可以正常显示出预期</p>
</li>
<li><p>增加一个content.js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">module.exports = <span class="string">"现在的内容是来自于content.js文件！"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>修改entry.js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(require(<span class="string">"./content.js"</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>执行第四步的命令</p>
</li>
</ol>
<p><strong>进行加载器试验</strong></p>
<ol>
<li><p>增加style.css文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">background: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>修改entry.js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">require(<span class="string">"!style!css!./style.css"</span>);</div><div class="line">document.write(require(<span class="string">"./content.js"</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>执行命令，安装加载器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install css-loader style-loader   <span class="comment"># 安装的时候不使用 -g</span></div></pre></td></tr></table></figure>
</li>
<li><p>执行webpack命令，运行看效果</p>
</li>
<li><p>可以在命令行中使用loader</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack ./entry.js bundle.js --module-bind <span class="string">"css=style!css"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>使用配置文件</strong><br>默认的配置文件为webpack.config.js</p>
<ol>
<li><p>增加webpack.config.js文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line"> entry: <span class="string">"./entry.js"</span>,</div><div class="line"> output: &#123;</div><div class="line">     path: __dirname,</div><div class="line">     filename: <span class="string">"bundle.js"</span></div><div class="line"> &#125;,</div><div class="line"> module: &#123;</div><div class="line">     loaders: [</div><div class="line">         &#123; <span class="built_in">test</span>: /\.css$/, loader: <span class="string">"style!css"</span> &#125;</div><div class="line">     ]</div><div class="line"> &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>执行程序</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>发布服务器</strong></p>
<ol>
<li><p>安装服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install webpack-dev-server -g</div><div class="line">$ webpack-dev-server --progress --colors</div></pre></td></tr></table></figure>
</li>
<li><p>服务器可以自动生成和刷新，修改代码保存后自动更新画面</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080/webpack-dev-server/bundle</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript 笔试题 续]]></title>
      <url>http://www.cmeng.cc/2016/11/15/index.md/Javascript_Written_Test_2/</url>
      <content type="html"><![CDATA[<h2 id="javascript-笔试题-续"><a href="#javascript-笔试题-续" class="headerlink" title="javascript 笔试题 续"></a>javascript 笔试题 续</h2><p>这些题目涉及对象的闭包,有万恶之源 <strong> this </strong> , 于是我把它们单独拉出一个板块，文章最后是我看完这些题之后含泪推荐一本书。。。<br><img src="http://ww3.sinaimg.cn/large/0065ewYjgw1f9t6gul26fj301s01s0si.jpg" alt="哭"><br><a id="more"></a></p>
<h4 id="先来一道简单的开胃菜"><a href="#先来一道简单的开胃菜" class="headerlink" title="先来一道简单的开胃菜"></a>先来一道简单的开胃菜</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var arr=[];</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fun</span></span>()&#123;</div><div class="line">  <span class="keyword">for</span>(var i=0;i&lt;4;i++)&#123;</div><div class="line">    var x=&#123;&#125;;</div><div class="line">    x.no=i; // 无关代码，可忽略</div><div class="line">    x.text=arr[i];// 无关代码，可忽略</div><div class="line">    x.fun=<span class="function"><span class="title">function</span></span>()&#123;console.log(i)&#125;;</div><div class="line">    arr.push(x);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">fun();</div><div class="line">arr[0].fun();</div><div class="line">arr[1].fun();</div><div class="line">arr[2].fun();</div><div class="line">arr[3].fun();</div></pre></td></tr></table></figure>
<p><strong> 分析： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fun() 执行结束之后：</div><div class="line">      i = 4;</div><div class="line">      arr数组中所有元素都是对象,</div><div class="line">      而对象中的fun为：function()&#123;console.log(i)&#125;;</div><div class="line">  所以所有输出都是 4</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="下面是主菜，主要涉及对-this和变量作用域的理解"><a href="#下面是主菜，主要涉及对-this和变量作用域的理解" class="headerlink" title="下面是主菜，主要涉及对 this和变量作用域的理解"></a>下面是主菜，主要涉及对 this和变量作用域的理解</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">window.a=300;</div><div class="line"> <span class="keyword">function</span> <span class="function"><span class="title">fn1</span></span>()&#123;</div><div class="line">   this.a=100;</div><div class="line">   this.b=200;</div><div class="line">   <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">     alert(this.a);</div><div class="line">   &#125;.call(arguments[0]);</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">function</span> <span class="function"><span class="title">fn2</span></span>()&#123;</div><div class="line">   this.a=new fn1();</div><div class="line">        //&#123;a:100,b:200&#125;</div><div class="line"> &#125;</div><div class="line"> var a=new fn1().b;//300</div><div class="line"> //a:200</div><div class="line"> var v=new fn1(fn2());//200</div><div class="line"> //a:&#123;a:100,b:200&#125;//[object Object]</div><div class="line"> //v:&#123;a:100,b:200&#125;</div></pre></td></tr></table></figure>
<p><strong> 提示： </strong></p>
<ul>
<li>this指 调用 函数/属性的元素，或是 new 出的新元素，所有无主的 this 都指 window * </li>
</ul>
<p><strong> 分析： </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">第一步：</div><div class="line">  var a = new fn1().b</div><div class="line">  1.1):  new 完得到 &#123;a:100; b:200;&#125;</div><div class="line">      <span class="built_in">return</span> 的函数被 call()强行调用,由于没有传参 ==&gt; argument[0] = undefined,即call函数绑定 this 为 undefined ==&gt; this代表 window  ==&gt;  alert (wondow.a) ==&gt; 300;</div><div class="line">   1.2): var a = &#123;a:100; b:200;&#125;.b alert (200)</div><div class="line"></div><div class="line">第二步：</div><div class="line">  var v = new fn1(fn2())</div><div class="line">  2.1): 先执行 fn2() 函数: this.a = new fn1();</div><div class="line">      注意：此处 this 指 window  且此时 window.a 由 1.2 改为 200;</div><div class="line">      同 1.1 ==&gt; alert(window.a) ==&gt; 200</div><div class="line">      最后 window.a =&#123;a:100; b:200;&#125;;</div><div class="line">      注意：没有返回值 ==&gt;  返回undefined</div><div class="line">  2.2): ==&gt; v = new fn1() ==&gt; alert(window.a) ==&gt; [object,Object]</div></pre></td></tr></table></figure></p>
<p><strong> 运行效果：为了截图方便，alert 变为 console 输出 </strong><br><img src="http://ww1.sinaimg.cn/large/0065ewYjgw1f9ubig3ecij30e603fdfv.jpg" alt="运行效果"></p>
<h4 id="另一道主菜。。。"><a href="#另一道主菜。。。" class="headerlink" title="另一道主菜。。。"></a>另一道主菜。。。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var number=2;</div><div class="line">var obj=&#123;</div><div class="line">    number:4,</div><div class="line">    fn1:(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      // 此处 this 指window，执行后 window.number =&gt; 4</div><div class="line">      this.number*=2;</div><div class="line">      // 无用代码，根据声明提前，此处number 为局部变量，无论此处如何操作都会在下一行重新赋值为3</div><div class="line">      // 不过此处不会报错，未经赋值， number 为 undefined</div><div class="line">      number*=2;  // ==&gt; number = NaN</div><div class="line">      var number=3;</div><div class="line">      <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        // this 指 window</div><div class="line">        this.number*=2;</div><div class="line">        number*=3;</div><div class="line">        console.log(number);</div><div class="line">      &#125;</div><div class="line">    &#125;)()</div><div class="line">  &#125;</div><div class="line">  var fn1=obj.fn1;</div><div class="line">  console.log(number);</div><div class="line">  fn1();</div><div class="line">  obj.fn1();</div></pre></td></tr></table></figure>
<p><strong> 分析： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">执行自调函数 ==&gt; fn1 : function()&#123; </div><div class="line">                // 此处 this 指window</div><div class="line">                        this.number*=2;</div><div class="line">                // 此处 number 是闭包保护变量，值为 3</div><div class="line">                        number*=3;</div><div class="line">                        console.log(number);</div><div class="line">                    &#125;</div><div class="line">第一步：var fn1 = obj.fn1; // 单纯引用，没有执行函数，不会有输出</div><div class="line"></div><div class="line">第二步：console.log(number); // 输出全局变量 number ==&gt; 4 : 在执行自调函数时改变</div><div class="line"></div><div class="line">第三步：fn1();  ==&gt; 输出闭包中的 number ==&gt; 3*3 ==&gt; 9</div><div class="line"></div><div class="line">第四步：obj.fn1(); ==&gt; 输出闭包中的 number ==&gt; 9*3 ==&gt; 27</div><div class="line">        注意：obj.fn1() 中的 this.number ==&gt;  obj.number</div></pre></td></tr></table></figure></p>
<p><strong> 运行效果 </strong><br><img src="http://ww1.sinaimg.cn/large/0065ewYjgw1f9ubkpc6k1j30dy030749.jpg" alt="运行效果"></p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>到此为止，所有的题目总结起来就是一个字“绕”，<br><img src="http://ww3.sinaimg.cn/large/0065ewYjgw1f9t6rtzwmrj304s064web.jpg" alt="javascript从入门到放弃"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript 笔试题]]></title>
      <url>http://www.cmeng.cc/2016/11/15/index.md/Javascript_Written_Test/</url>
      <content type="html"><![CDATA[<h2 id="javascript-笔试题"><a href="#javascript-笔试题" class="headerlink" title="javascript 笔试题"></a>javascript 笔试题</h2><p>最近朋友给我推荐了几道关于javascript闭包和面向对象的面试题，兴冲冲的看了一下，本来就没想过会很简单，但是看完之后依然一脸懵逼，写这篇博客梳理一遍知识点同时也引以为戒。。。<img src="http://ww3.sinaimg.cn/large/0065ewYjgw1f9t6gul26fj301s01s0si.jpg" alt="哭"><br>不过做完这些题之后不禁想到了一本书。。。<br><a id="more"></a></p>
<h2 id="考点：变量作用域"><a href="#考点：变量作用域" class="headerlink" title="考点：变量作用域"></a>考点：变量作用域</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var f=<span class="function"><span class="title">function</span></span>()&#123;var a=b=1;&#125;;</div><div class="line">f();</div><div class="line">console.log(b); //1</div><div class="line">console.log(a); //报错</div><div class="line"></div><div class="line">var i,j=0,fn=<span class="function"><span class="title">function</span></span>()&#123;var i=j=2;&#125;;</div><div class="line">fn();</div><div class="line">console.log(i,j);//undefined 2</div></pre></td></tr></table></figure>
<h4 id="知识点：js-中所有未定义直接使用的变量都默认为全局变量"><a href="#知识点：js-中所有未定义直接使用的变量都默认为全局变量" class="headerlink" title="知识点：js 中所有未定义直接使用的变量都默认为全局变量"></a>知识点：js 中所有未定义直接使用的变量都默认为全局变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">第一题:</div><div class="line">  var a=b=1 的赋值方式被计算机理解为：</div><div class="line">   var a=1;   b=1;</div><div class="line">  结果：a是局部变量，b是全局变量</div><div class="line">        console输出未定义的变量 -&gt; 报错</div><div class="line">所以：不要使用 连续赋值</div><div class="line"></div><div class="line">第二题:</div><div class="line">    j被当作全局变量重新赋值</div><div class="line">    i 是局部变量，对全局变量 i 没有影响，所以全局变量还是 未赋值 -&gt;undefined</div></pre></td></tr></table></figure>
<hr>
<h3 id="考点：setTimeout-函数特性"><a href="#考点：setTimeout-函数特性" class="headerlink" title="考点：setTimeout 函数特性"></a>考点：setTimeout 函数特性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var f=<span class="function"><span class="title">function</span></span>()&#123;var a=b=1;&#125;;</div><div class="line"><span class="built_in">set</span>Timeout(f,0);</div><div class="line">console.log(b);//报错</div></pre></td></tr></table></figure>
<h4 id="知识点：-setTimeout-函数会在当前作用域中最后执行"><a href="#知识点：-setTimeout-函数会在当前作用域中最后执行" class="headerlink" title="知识点： setTimeout 函数会在当前作用域中最后执行"></a>知识点： setTimeout 函数会在当前作用域中最后执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在本题中，console.log(b)实际上会在 setTimeout()函数之前执行，</div><div class="line">因而在执行 console.log(b)时 b 是未定义的变量 ==&gt; 报错。</div></pre></td></tr></table></figure>
<hr>
<h2 id="考点：闭包-gt-取闭包保护的内容"><a href="#考点：闭包-gt-取闭包保护的内容" class="headerlink" title="考点：闭包 -&gt; 取闭包保护的内容"></a>考点：闭包 -&gt; 取闭包保护的内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var o=(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">  var person=&#123;</div><div class="line">    name:<span class="string">'eric'</span>,</div><div class="line">    age:24</div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">return</span> &#123;</div><div class="line">    run:<span class="keyword">function</span>(k)&#123;</div><div class="line">      <span class="built_in">return</span> person[k];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h4 id="问：不改变以上代码，如何获得闭包中的person"><a href="#问：不改变以上代码，如何获得闭包中的person" class="headerlink" title="问：不改变以上代码，如何获得闭包中的person"></a>问：不改变以上代码，如何获得闭包中的person</h4><p><strong> 分析： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">首先：自调函数执行完之后的返回值赋值给 变量 o</div><div class="line">  所以 o = &#123;run : function(k)&#123;</div><div class="line">            return person[k];</div><div class="line">        &#125;&#125; </div><div class="line">   person = &#123;name:&apos;eric&apos;,age:24&#125;</div></pre></td></tr></table></figure></p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>  <strong> 定义访问器属性 返回自身 </strong><br>  <strong> 闭包函数调用自定义属性 </strong></p>
<p>有必要先说一下 Object.defineProperty 的用法：<br><strong> 语法 </strong><br>    Object.defineProperty(object, propertyname, descriptor)<br><strong> 参数 </strong></p>
<pre><code>* object *
  必需。  要在其上添加或修改属性的对象。  这可能是一个本机 JavaScript 对象（即用户定义的对象或内置对象）或 DOM 对象。  
propertyname
  必需。  一个包含属性名称的字符串。  
descriptor
  必需。  属性描述符。  它可以针对数据属性或访问器属性。  
</code></pre><p><strong> 返回值 </strong><br>      已修改对象。<br><a href="https://msdn.microsoft.com/library/dd548687(v=vs.94).aspx" target="_blank" rel="external">Object.defineProperty 用法传送门</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> Object.defineProperty(Object.prototype,<span class="string">"self"</span>,&#123;</div><div class="line">  get:<span class="function"><span class="title">function</span></span>()&#123;<span class="built_in">return</span> this;&#125;</div><div class="line">&#125;);</div><div class="line">var person_copy=o.run(<span class="string">"self"</span>);</div><div class="line"></div><div class="line">// 测试</div><div class="line">var person_copy=o.run(<span class="string">"self"</span>);</div><div class="line">console.log(o.run(<span class="string">"age"</span>));  // 24 =&gt; 闭包保护数据</div><div class="line">person_copy.age=-2;</div><div class="line">console.log(o.run(<span class="string">"age"</span>)); // -2  成功修改闭包</div></pre></td></tr></table></figure>
<p>// TODO ： 原理<br>// 个人对 Object.defineProperty 的了解不深</p>
<hr>
<h2 id="考点-：闭包-函数"><a href="#考点-：闭包-函数" class="headerlink" title="考点 ：闭包 函数"></a>考点 ：闭包 函数</h2><p>####先来一道简单的打底<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var a=0,b=0;</div><div class="line">var A=<span class="keyword">function</span>(a)&#123;</div><div class="line">  A=<span class="keyword">function</span>(b)&#123;</div><div class="line">    console.log(a+b++);</div><div class="line">  &#125;</div><div class="line">  console.log(a);</div><div class="line">&#125;</div><div class="line">A(1);//1</div><div class="line">A(12);//13</div></pre></td></tr></table></figure></p>
<p><strong> 分析： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.1): A(1) --&gt; 首次执行，A被重新赋值，输出参数 1，运行结束后：</div><div class="line">          A = function(b)&#123; // 此时变量 a=1 已被闭包保护</div><div class="line">            console.log( a + b++);</div><div class="line">          &#125;</div><div class="line">1.2): A(12) --&gt; console.log(a + 12++); ==&gt; 输出 13</div></pre></td></tr></table></figure></p>
<p><strong> 运行效果： </strong><br><img src="http://ww1.sinaimg.cn/large/0065ewYjgw1f9ubqdokwfj30ej041wej.jpg" alt="运行效果"></p>
<hr>
<h4 id="下面才是正餐："><a href="#下面才是正餐：" class="headerlink" title="下面才是正餐："></a>下面才是正餐：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> fun(n,o)&#123;</div><div class="line">   console.log(o);</div><div class="line">   <span class="built_in">return</span>&#123;</div><div class="line">     fun:<span class="keyword">function</span>(m)&#123;</div><div class="line">       <span class="built_in">return</span> fun(m,n);</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> var a=fun(0); a.fun(1); a.fun(2); a.fun(3);</div><div class="line">    //undefined     0        0          0    </div><div class="line"> var b=fun(0).fun(1).fun(2).fun(3);</div><div class="line">  //undefined   0      1      2     </div><div class="line"> var c=fun(0).fun(1); c.fun(2); c.fun(3);</div><div class="line">  //undefined   0          1         1</div></pre></td></tr></table></figure>
<h4 id="提问：三行代码输出的结果分别是什么"><a href="#提问：三行代码输出的结果分别是什么" class="headerlink" title="提问：三行代码输出的结果分别是什么"></a>提问：三行代码输出的结果分别是什么</h4><p><strong> 分析： </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">第一行：</div><div class="line">  1.1): var a = fun(0) =&gt; 并没有传出参数 o =&gt; 输出 undefined，</div><div class="line">      a = &#123;  // 此时参数 n=0 已被闭包保护</div><div class="line">          fun:function(m)&#123;</div><div class="line">            return fun(m,n);</div><div class="line">       &#125;</div><div class="line">  1.2): a.fun(1) ==&gt; function(m=1)&#123; return fun(m,n);&#125;</div><div class="line">        输出闭包变量 n 的值，即 0;</div><div class="line">        而调用过程并没有修改变量 n, 所以 n = 0</div><div class="line">      ==&gt; a.fun(2) 输出 0</div><div class="line">      ==&gt; a.fun(3) 输出 0</div><div class="line">      ...</div><div class="line">      ==&gt; a.fun(x) 输出 0</div><div class="line"></div><div class="line">第二行: </div><div class="line">  2.1): 同 1.1</div><div class="line">  2.2): b.fun(1) ==&gt; function(m=1)&#123; return fun(m,n=0);&#125; ==&gt; 输出 n ,即 0</div><div class="line">     b = &#123;  // 此时 n 依然被闭包保护，不过值变为新的参数 1，</div><div class="line">          fun:function(m)&#123;</div><div class="line">            return fun(m,n &lt;== 1);</div><div class="line">       &#125;</div><div class="line">  2.3): 类似 2.2 推导， 输出：1，闭包变量 n = 2;</div><div class="line">    可得：本题链式调用每次输出闭包变量 n 值，n 的值为上次调用传入的参数</div><div class="line">    ... .fun(x-1).fun(x)  ==&gt; 最后输出 x-1</div><div class="line"></div><div class="line">第三行：</div><div class="line">  3.1): 同 2.1,2.2; 运行结束后：闭包变量 n -&gt; undefined -&gt; 0 -&gt; 1 </div><div class="line">  3.2): 同 1.2, 单步调用不修改变量 n, ==&gt; 一直输出 变量 n=&gt;1</div></pre></td></tr></table></figure></p>
<p><strong> 运行结果 </strong><br><img src="http://ww4.sinaimg.cn/large/0065ewYjgw1f9ubutjfw4j30fi08iglx.jpg" alt="运行结果"></p>
<hr>
<h2 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记首次使用hexo的尴尬历程]]></title>
      <url>http://www.cmeng.cc/2016/09/21/index.md/The_awkward_experience_of_first_use_Hexo/</url>
      <content type="html"><![CDATA[<h2 id="记首次使用hexo的尴尬历程"><a href="#记首次使用hexo的尴尬历程" class="headerlink" title="记首次使用hexo的尴尬历程"></a>记首次使用hexo的尴尬历程</h2><p>2016年9月19号，第一次听说<a href="https://hexo.io" target="_blank" rel="external">Hexo</a>。据说用这个框架可以很快搭建出一个漂亮的博客，正好朋友有这方面的需求，于是第二天尝试了一下，嗯，效果挺好，不过遇到一些坑。。。<br><a id="more"></a><br>我使用的主题是 <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="external">Yelee</a>，<a href="https://hexo.io/themes" target="_blank" rel="external">Hexo主题传送门</a></p>
<h3 id="坑1-站内搜索"><a href="#坑1-站内搜索" class="headerlink" title="坑1 : 站内搜索"></a>坑1 : 站内搜索</h3><p>本来一行命令就可以解决的事到我这边却莫名其妙的出了问题。。。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save hexo-generator-search</div></pre></td></tr></table></figure>
<p>最让我恼火的是不知道什么原因就好了，感觉一个多小时的查找都付之东流了。。。<br>不过我发现这个主题在手机和平板的竖屏状态下是没有搜索栏的，看了一下代码发现作者把搜索栏放到了左边栏的位置，竖屏后不好调整代码位置，索性直接隐藏了。我想尝试将搜索框完善一下，不过这样要改动的地方不会少，漫漫长路。。。</p>
<h3 id="坑2-tag-云"><a href="#坑2-tag-云" class="headerlink" title="坑2 : tag 云"></a>坑2 : tag 云</h3><p>文档创建tags文件,生成一个index.md文件，按文档所说（后来才知道我以为的并不是我以为的T_T）标签云在index.md文件中生成，于是我就把所有标签定义在index.md文件中，由此开启了悲惨之旅。。。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new post tags</div></pre></td></tr></table></figure>
<p>正确的理解是：tags中的index.md会集中显示标签，同时又不需要在index.md文件中定义任何标签，因为模板会将所有文件中的标签整合，去重，然后在tags里显示。<br>没错，事实是tags的index.md文件就是单纯的显示模块，而我花了一个多小时的时间去尝试改变标签的定义方式，标签云的引用，甚至于标签云样式的定义。。。表示已经哭晕在厕所。。。</p>
<h3 id="坑3-上传"><a href="#坑3-上传" class="headerlink" title="坑3 : 上传"></a>坑3 : 上传</h3><p>历经重重艰辛，终于到了上传的时刻。<br><img src="https://ws1.sinaimg.cn/large/0065ewYjgw1f81fut0ujwj302s02sdfv.jpg" alt="激动的图"><br>满怀期待的输入了 <strong> hexo d </strong>,Duang 的一下就弹出了一堆警告，仔细一看是编码问题：windows的CRLF,linux的LF，两家一直不对付，不过好在不影响效果,也就无所谓了。<br>然而紧接着就是一个华丽的报错：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error: bash: /dev/tty/:No such device or address</div><div class="line">error: failed to execute proment script (<span class="built_in">exit</span> code 1)</div></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/0065ewYjgw1f81gr9pmbtj30q70eidiu.jpg" alt="报错"></p>
<p>在网上折腾半小时之后我才想起来用的 <strong> ssh </strong>上传到 github,<strong> _config.yml </strong>文件的配置里居然用的 https,被自己蠢哭了。。。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: https://github.com:xxx/xxx.xxx.io.git</div><div class="line">  branch: [master]</div></pre></td></tr></table></figure>
<p>正确配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: git@github.com:xxx/xxx.xxx.io.git</div><div class="line">  branch: [master]</div></pre></td></tr></table></figure>
<p>问题解决，继续上传，<strong> hexo d </strong>,还是老一套的警告，没有报错证明确实是配置文件的协议有问题，然而就在我等这下文的时候它却华丽丽的停下了！没错，没有一点点防备的停下了，没有开始上传的提示，也没有报错，就这么停了。。。<br><img src="https://ws4.sinaimg.cn/large/0065ewYjgw1f81g6wqae2j30i40d242p.jpg" alt="hexo d"><br>当时我就懵逼了，不过经历一下午的坎坷，抗打击能力确实有所提高。。。话说我应该高兴吗。。。<br><img src="https://ws3.sinaimg.cn/large/0065ewYjgw1f81gf80qdij302s02smx4.jpg" alt="泪奔"><br>我决定等一等再说，不管是电脑卡了还是网络延迟又或者是后台传输（当然这是最好的情况）都不宜强行中断，而且当时网络确实不咋地。终于在我吃完饭之后看到了成功的讯号。。。话说时间也太长了吧。。。<br><img src="https://ws4.sinaimg.cn/large/0065ewYjgw1f81gnf925vj30ls05ijsn.jpg" alt="上传成功"></p>
<p>顺带提一句，我的同学告诉我hexo-deployer-git 插件使用ssh上传内容到github,但同时这个插件却没有输入密码的部分，因此总是报错：权限不足，于是他告诫我ssh不要有密码。我将ssh密码置为空之后果然没有出现他所说的报错。<br>但是从程序员的角度来说，虽然ssh本身有一层加密，但不能设密码这一点算是个小缺点。事实上本人并没有亲自试过能不能带密码上传，同学的错误代码也没有保留下来，因此希望有志之士试过之后告诉我。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery小记]]></title>
      <url>http://www.cmeng.cc/2016/09/20/index.md/jquery/</url>
      <content type="html"><![CDATA[<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p><strong>jQuery: $(document).ready(function(){…}) VS DOM: window.onload=function(){…}</strong><br>ready 的底层事件：DOM中的ondocumentcontentloaded:只要DOM树加载完成，就会触发<br>window.onload 在页面全部加载完成之后触发</p>
<a id="more"></a>
<p><strong>大致流程如图所示：</strong><br><img src="https://ws3.sinaimg.cn/large/0065ewYjgw1f825osk8jtj30kj06e0tj.jpg" alt="流程图"></p>
<p><strong>举例测试</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  &lt;h1&gt;页面加载完成事件&lt;/h1&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    console.time(<span class="string">"docReady"</span>);</div><div class="line">    console.time(<span class="string">"winLoad"</span>);</div><div class="line">  &lt;/script&gt;</div><div class="line">  &lt;script src=<span class="string">"../jquery-1.11.3.js"</span>&gt;&lt;/script&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    window.onload=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(<span class="string">"window.onload..."</span>);</div><div class="line">        console.timeEnd(<span class="string">"winLoad"</span>);</div><div class="line">    &#125;</div><div class="line">    $(document).ready(<span class="keyword">function</span>($) &#123;</div><div class="line">        console.log(<span class="string">"document ready..."</span>);</div><div class="line">        console.timeEnd(<span class="string">"docReady"</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">  &lt;/script&gt;</div><div class="line"> &lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p><strong>执行结果</strong><br><img src="https://ws1.sinaimg.cn/large/0065ewYjgw1f825p93mq0j30fl02bmxb.jpg" alt="执行结果"></p>
<p>&nbsp;&nbsp;事实上：将script放在body结尾也能实现 ready 的功能：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  &lt;h1&gt;页面加载完成事件&lt;/h1&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    console.time(<span class="string">"docReady"</span>);</div><div class="line">    console.time(<span class="string">"winLoad"</span>);</div><div class="line">  &lt;/script&gt;</div><div class="line">  &lt;script src=<span class="string">"../jquery-1.11.3.js"</span>&gt;&lt;/script&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    window.onload=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(<span class="string">"window.onload..."</span>);</div><div class="line">        console.timeEnd(<span class="string">"winLoad"</span>);</div><div class="line">    &#125;</div><div class="line">    console.log(<span class="string">"document ready..."</span>);</div><div class="line">    console.timeEnd(<span class="string">"docReady"</span>);</div><div class="line">  &lt;/script&gt;</div><div class="line"> &lt;/body&gt;</div></pre></td></tr></table></figure></p>
<h3 id="显示-隐藏"><a href="#显示-隐藏" class="headerlink" title="显示/隐藏"></a>显示/隐藏</h3><p>&nbsp;&nbsp;jQuery中有 <strong>show()</strong>，<strong>hide()</strong>控制内容的显示和隐藏，但只能完成一个功能<br>toggle()函数可以同时完成显示和隐藏的功能<br>在不加参数的情况下：<strong>show(),hide(),toggle()</strong> 函数通过改变元素的 <strong>display</strong> 属性实现显示和隐藏，没有动画效果<br>加上参数：函数设置 <strong>overflow:hidden</strong>,通过将元素的 <strong>width，height和opacity</strong>属性逐渐变为 <strong>0</strong> 实现过度效果</p>
<h3 id="动画函数-animate"><a href="#动画函数-animate" class="headerlink" title="动画函数 animate()"></a>动画函数 animate()</h3><p>&nbsp;&nbsp; <strong>$(…).animate(parmes,speed,easing,fn)</strong><br>参数：<br>    parmes: css属性的目标值：{属性:值,属性:值 … }<br>        注意： <strong>css 属性名要去横线,变驼峰;值是字符串而且要加单位</strong> ==&gt;marginLeft:’12px’<br>    speed: 速度：数字（单位：ms）/字符串”slow/normal/fast”<br>    easing: 过度方式：linear(匀速)，ease(慢到快)。。。<br><strong>动画中的排队和并发(串行和并行)</strong><br>一个 <strong><em>animate</em></strong> 函数中修改的属性会同时修改，多个 <strong><em>animate</em></strong> 函数时会等前一个动画变换完再变换。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(...).animate(&#123;width:<span class="string">'200px'</span>,height:<span class="string">'200px'</span>&#125;,1000);</div></pre></td></tr></table></figure>
<p>执行效果：该元素的宽和高在1秒内都变为200px</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(...).animate(&#123;width:<span class="string">'200px'</span>&#125;,1000).animate(&#123;height:<span class="string">'200px'</span>&#125;,2000);</div></pre></td></tr></table></figure>
<p>执行效果：该元素的宽在1秒内都变为200px后，高在2秒内变为200px</p>
<p><strong>js回调函数中的 this 指window，animate函数中的回调函数指当前对象</strong> </p>
]]></content>
    </entry>
    
  
  
</search>
